/*
 * generated by Xtext 2.19.0
 */
package de.ubt.ai1.mule.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MuLEGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsProgramAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsProgramProgramKeyword_0_0_0 = (Keyword)cIsProgramAssignment_0_0.eContents().get(0);
		private final Assignment cIsLibraryAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cIsLibraryLibraryKeyword_0_1_0 = (Keyword)cIsLibraryAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cProgramElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProgramElementsProgramElementParserRuleCall_3_0 = (RuleCall)cProgramElementsAssignment_3.eContents().get(0);
		private final Assignment cMainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMainMainProcedureParserRuleCall_4_0 = (RuleCall)cMainAssignment_4.eContents().get(0);
		
		//CompilationUnit:
		//	(isProgram?='program' | isLibrary?='library') name=ID
		//	imports+=Import*
		//	programElements+=ProgramElement*
		//	main=MainProcedure?;
		@Override public ParserRule getRule() { return rule; }
		
		//(isProgram?='program' | isLibrary?='library') name=ID imports+=Import* programElements+=ProgramElement*
		//main=MainProcedure?
		public Group getGroup() { return cGroup; }
		
		//(isProgram?='program' | isLibrary?='library')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//isProgram?='program'
		public Assignment getIsProgramAssignment_0_0() { return cIsProgramAssignment_0_0; }
		
		//'program'
		public Keyword getIsProgramProgramKeyword_0_0_0() { return cIsProgramProgramKeyword_0_0_0; }
		
		//isLibrary?='library'
		public Assignment getIsLibraryAssignment_0_1() { return cIsLibraryAssignment_0_1; }
		
		//'library'
		public Keyword getIsLibraryLibraryKeyword_0_1_0() { return cIsLibraryLibraryKeyword_0_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//programElements+=ProgramElement*
		public Assignment getProgramElementsAssignment_3() { return cProgramElementsAssignment_3; }
		
		//ProgramElement
		public RuleCall getProgramElementsProgramElementParserRuleCall_3_0() { return cProgramElementsProgramElementParserRuleCall_3_0; }
		
		//main=MainProcedure?
		public Assignment getMainAssignment_4() { return cMainAssignment_4; }
		
		//MainProcedure
		public RuleCall getMainMainProcedureParserRuleCall_4_0() { return cMainMainProcedureParserRuleCall_4_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedNamespaceCompilationUnitCrossReference_1_0 = (CrossReference)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceCompilationUnitIDTerminalRuleCall_1_0_1 = (RuleCall)cImportedNamespaceCompilationUnitCrossReference_1_0.eContents().get(1);
		
		//Import:
		//	'import' importedNamespace=[CompilationUnit];
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=[CompilationUnit]
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=[CompilationUnit]
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//[CompilationUnit]
		public CrossReference getImportedNamespaceCompilationUnitCrossReference_1_0() { return cImportedNamespaceCompilationUnitCrossReference_1_0; }
		
		//ID
		public RuleCall getImportedNamespaceCompilationUnitIDTerminalRuleCall_1_0_1() { return cImportedNamespaceCompilationUnitIDTerminalRuleCall_1_0_1; }
	}
	public class MainProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.MainProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainProcedureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Keyword cEndmainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MainProcedure:
		//	{MainProcedure} 'main' block=Block 'endmain';
		@Override public ParserRule getRule() { return rule; }
		
		//{MainProcedure} 'main' block=Block 'endmain'
		public Group getGroup() { return cGroup; }
		
		//{MainProcedure}
		public Action getMainProcedureAction_0() { return cMainProcedureAction_0; }
		
		//'main'
		public Keyword getMainKeyword_1() { return cMainKeyword_1; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
		
		//'endmain'
		public Keyword getEndmainKeyword_3() { return cEndmainKeyword_3; }
	}
	public class ProgramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ProgramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramElement:
		//	TypeDeclaration | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDeclaration | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_0() { return cTypeDeclarationParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompilationUnitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NamedElement:
		//	EnumerationValue | TypeDeclaration | Feature | CompilationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumerationValue | TypeDeclaration | Feature | CompilationUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumerationValue
		public RuleCall getEnumerationValueParserRuleCall_0() { return cEnumerationValueParserRuleCall_0; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1() { return cTypeDeclarationParserRuleCall_1; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_2() { return cFeatureParserRuleCall_2; }
		
		//CompilationUnit
		public RuleCall getCompilationUnitParserRuleCall_3() { return cCompilationUnitParserRuleCall_3; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaredTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOperationTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//////// DATA TYPES //////
		//DataType:
		//	BasicType | DeclaredType | ReferenceType | ListType | OperationType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | DeclaredType | ReferenceType | ListType | OperationType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//DeclaredType
		public RuleCall getDeclaredTypeParserRuleCall_1() { return cDeclaredTypeParserRuleCall_1; }
		
		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_2() { return cReferenceTypeParserRuleCall_2; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_3() { return cListTypeParserRuleCall_3; }
		
		//OperationType
		public RuleCall getOperationTypeParserRuleCall_4() { return cOperationTypeParserRuleCall_4; }
	}
	public class DeclaredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.DeclaredType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeDeclarationCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeDeclarationQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParamsDataTypeParserRuleCall_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParamsDataTypeParserRuleCall_1_2_1_0 = (RuleCall)cTypeParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DeclaredType:
		//	type=[TypeDeclaration|QualifiedName] ('<' typeParams+=DataType (',' typeParams+=DataType)* '>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[TypeDeclaration|QualifiedName] ('<' typeParams+=DataType (',' typeParams+=DataType)* '>')?
		public Group getGroup() { return cGroup; }
		
		//type=[TypeDeclaration|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[TypeDeclaration|QualifiedName]
		public CrossReference getTypeTypeDeclarationCrossReference_0_0() { return cTypeTypeDeclarationCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeDeclarationQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeDeclarationQualifiedNameParserRuleCall_0_0_1; }
		
		//('<' typeParams+=DataType (',' typeParams+=DataType)* '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//typeParams+=DataType
		public Assignment getTypeParamsAssignment_1_1() { return cTypeParamsAssignment_1_1; }
		
		//DataType
		public RuleCall getTypeParamsDataTypeParserRuleCall_1_1_0() { return cTypeParamsDataTypeParserRuleCall_1_1_0; }
		
		//(',' typeParams+=DataType)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//typeParams+=DataType
		public Assignment getTypeParamsAssignment_1_2_1() { return cTypeParamsAssignment_1_2_1; }
		
		//DataType
		public RuleCall getTypeParamsDataTypeParserRuleCall_1_2_1_0() { return cTypeParamsDataTypeParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIntegerKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameRationalKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameStringKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameBooleanKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		
		//BasicType:
		//	typeName=('integer' | 'rational' | 'string' | 'boolean');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('integer' | 'rational' | 'string' | 'boolean')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('integer' | 'rational' | 'string' | 'boolean')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'integer'
		public Keyword getTypeNameIntegerKeyword_0_0() { return cTypeNameIntegerKeyword_0_0; }
		
		//'rational'
		public Keyword getTypeNameRationalKeyword_0_1() { return cTypeNameRationalKeyword_0_1; }
		
		//'string'
		public Keyword getTypeNameStringKeyword_0_2() { return cTypeNameStringKeyword_0_2; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_0_3() { return cTypeNameBooleanKeyword_0_3; }
	}
	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ReferenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReferenceType:
		//	'reference' '<' type=DataType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'reference' '<' type=DataType '>'
		public Group getGroup() { return cGroup; }
		
		//'reference'
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListType:
		//	'list' '<' type=DataType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'list' '<' type=DataType '>'
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class OperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.OperationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamTypesDataTypeParserRuleCall_3_0_0 = (RuleCall)cParamTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamTypesDataTypeParserRuleCall_3_1_1_0 = (RuleCall)cParamTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		
		//OperationType:
		//	{OperationType} 'operation' '(' (paramTypes+=DataType (',' paramTypes+=DataType)*)? ')' (':' type=DataType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperationType} 'operation' '(' (paramTypes+=DataType (',' paramTypes+=DataType)*)? ')' (':' type=DataType)?
		public Group getGroup() { return cGroup; }
		
		//{OperationType}
		public Action getOperationTypeAction_0() { return cOperationTypeAction_0; }
		
		//'operation'
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(paramTypes+=DataType (',' paramTypes+=DataType)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//paramTypes+=DataType
		public Assignment getParamTypesAssignment_3_0() { return cParamTypesAssignment_3_0; }
		
		//DataType
		public RuleCall getParamTypesDataTypeParserRuleCall_3_0_0() { return cParamTypesDataTypeParserRuleCall_3_0_0; }
		
		//(',' paramTypes+=DataType)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//paramTypes+=DataType
		public Assignment getParamTypesAssignment_3_1_1() { return cParamTypesAssignment_3_1_1; }
		
		//DataType
		public RuleCall getParamTypesDataTypeParserRuleCall_3_1_1_0() { return cParamTypesDataTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' type=DataType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_5_1_0() { return cTypeDataTypeParserRuleCall_5_1_0; }
	}
	public class VisibilityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.VisibilityModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProtectedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//VisibilityModifier:
		//	'private' | 'protected';
		@Override public ParserRule getRule() { return rule; }
		
		//'private' | 'protected'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'private'
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }
		
		//'protected'
		public Keyword getProtectedKeyword_1() { return cProtectedKeyword_1; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeDeclaration:
		//	Composition | Enumeration | TypeParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Composition | Enumeration | TypeParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Composition
		public RuleCall getCompositionParserRuleCall_0() { return cCompositionParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
		
		//TypeParameter
		public RuleCall getTypeParameterParserRuleCall_2() { return cTypeParameterParserRuleCall_2; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEnumerationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValuesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuesEnumerationValueParserRuleCall_5_0 = (RuleCall)cValuesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cValuesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValuesEnumerationValueParserRuleCall_6_1_0 = (RuleCall)cValuesAssignment_6_1.eContents().get(0);
		private final Keyword cEndtypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Enumeration:
		//	visibility=VisibilityModifier? 'type' name=ID ':' 'enumeration' values+=EnumerationValue (','
		//	values+=EnumerationValue)* 'endtype';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityModifier? 'type' name=ID ':' 'enumeration' values+=EnumerationValue (',' values+=EnumerationValue)*
		//'endtype'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_0_0() { return cVisibilityVisibilityModifierParserRuleCall_0_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_4() { return cEnumerationKeyword_4; }
		
		//values+=EnumerationValue
		public Assignment getValuesAssignment_5() { return cValuesAssignment_5; }
		
		//EnumerationValue
		public RuleCall getValuesEnumerationValueParserRuleCall_5_0() { return cValuesEnumerationValueParserRuleCall_5_0; }
		
		//(',' values+=EnumerationValue)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//values+=EnumerationValue
		public Assignment getValuesAssignment_6_1() { return cValuesAssignment_6_1; }
		
		//EnumerationValue
		public RuleCall getValuesEnumerationValueParserRuleCall_6_1_0() { return cValuesEnumerationValueParserRuleCall_6_1_0; }
		
		//'endtype'
		public Keyword getEndtypeKeyword_7() { return cEndtypeKeyword_7; }
	}
	public class EnumerationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.EnumerationValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeParamsTypeParameterParserRuleCall_4_1_0 = (RuleCall)cTypeParamsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTypeParamsTypeParameterParserRuleCall_4_2_1_0 = (RuleCall)cTypeParamsAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCompositionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cExtendsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSuperTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSuperTypeCompositionCrossReference_7_1_0 = (CrossReference)cSuperTypeAssignment_7_1.eContents().get(0);
		private final RuleCall cSuperTypeCompositionQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cSuperTypeCompositionCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cLessThanSignKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSuperTypeParamsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0 = (RuleCall)cSuperTypeParamsAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_7_2_2 = (Group)cGroup_7_2.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_2_0 = (Keyword)cGroup_7_2_2.eContents().get(0);
		private final Assignment cSuperTypeParamsAssignment_7_2_2_1 = (Assignment)cGroup_7_2_2.eContents().get(1);
		private final RuleCall cSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0 = (RuleCall)cSuperTypeParamsAssignment_7_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7_2_3 = (Keyword)cGroup_7_2.eContents().get(3);
		private final Assignment cTypeDeclarationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeDeclarationsTypeDeclarationParserRuleCall_8_0 = (RuleCall)cTypeDeclarationsAssignment_8.eContents().get(0);
		private final Assignment cAttributesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAttributesAttributeParserRuleCall_9_0 = (RuleCall)cAttributesAssignment_9.eContents().get(0);
		private final Assignment cOperationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOperationsOperationParserRuleCall_10_0 = (RuleCall)cOperationsAssignment_10.eContents().get(0);
		private final Keyword cEndtypeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Composition:
		//	visibility=VisibilityModifier? abstract?='abstract'? 'type' name=ID ('<' typeParams+=TypeParameter (','
		//	typeParams+=TypeParameter)* '>')?
		//	':' 'composition' ('extends' superType=[Composition|QualifiedName] ('<' superTypeParams+=TypeParameter (','
		//	superTypeParams+=TypeParameter)* '>')?)?
		//	typeDeclarations+=TypeDeclaration*
		//	attributes+=Attribute*
		//	operations+=Operation*
		//	'endtype';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityModifier? abstract?='abstract'? 'type' name=ID ('<' typeParams+=TypeParameter (','
		//typeParams+=TypeParameter)* '>')? ':' 'composition' ('extends' superType=[Composition|QualifiedName] ('<'
		//superTypeParams+=TypeParameter (',' superTypeParams+=TypeParameter)* '>')?)? typeDeclarations+=TypeDeclaration*
		//attributes+=Attribute* operations+=Operation* 'endtype'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_0_0() { return cVisibilityVisibilityModifierParserRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//typeParams+=TypeParameter
		public Assignment getTypeParamsAssignment_4_1() { return cTypeParamsAssignment_4_1; }
		
		//TypeParameter
		public RuleCall getTypeParamsTypeParameterParserRuleCall_4_1_0() { return cTypeParamsTypeParameterParserRuleCall_4_1_0; }
		
		//(',' typeParams+=TypeParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//typeParams+=TypeParameter
		public Assignment getTypeParamsAssignment_4_2_1() { return cTypeParamsAssignment_4_2_1; }
		
		//TypeParameter
		public RuleCall getTypeParamsTypeParameterParserRuleCall_4_2_1_0() { return cTypeParamsTypeParameterParserRuleCall_4_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//'composition'
		public Keyword getCompositionKeyword_6() { return cCompositionKeyword_6; }
		
		//('extends' superType=[Composition|QualifiedName] ('<' superTypeParams+=TypeParameter (','
		//superTypeParams+=TypeParameter)* '>')?)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'extends'
		public Keyword getExtendsKeyword_7_0() { return cExtendsKeyword_7_0; }
		
		//superType=[Composition|QualifiedName]
		public Assignment getSuperTypeAssignment_7_1() { return cSuperTypeAssignment_7_1; }
		
		//[Composition|QualifiedName]
		public CrossReference getSuperTypeCompositionCrossReference_7_1_0() { return cSuperTypeCompositionCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeCompositionQualifiedNameParserRuleCall_7_1_0_1() { return cSuperTypeCompositionQualifiedNameParserRuleCall_7_1_0_1; }
		
		//('<' superTypeParams+=TypeParameter (',' superTypeParams+=TypeParameter)* '>')?
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_7_2_0() { return cLessThanSignKeyword_7_2_0; }
		
		//superTypeParams+=TypeParameter
		public Assignment getSuperTypeParamsAssignment_7_2_1() { return cSuperTypeParamsAssignment_7_2_1; }
		
		//TypeParameter
		public RuleCall getSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0() { return cSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0; }
		
		//(',' superTypeParams+=TypeParameter)*
		public Group getGroup_7_2_2() { return cGroup_7_2_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_2_0() { return cCommaKeyword_7_2_2_0; }
		
		//superTypeParams+=TypeParameter
		public Assignment getSuperTypeParamsAssignment_7_2_2_1() { return cSuperTypeParamsAssignment_7_2_2_1; }
		
		//TypeParameter
		public RuleCall getSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0() { return cSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7_2_3() { return cGreaterThanSignKeyword_7_2_3; }
		
		//typeDeclarations+=TypeDeclaration*
		public Assignment getTypeDeclarationsAssignment_8() { return cTypeDeclarationsAssignment_8; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationsTypeDeclarationParserRuleCall_8_0() { return cTypeDeclarationsTypeDeclarationParserRuleCall_8_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_9() { return cAttributesAssignment_9; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_9_0() { return cAttributesAttributeParserRuleCall_9_0; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_10() { return cOperationsAssignment_10; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_10_0() { return cOperationsOperationParserRuleCall_10_0; }
		
		//'endtype'
		public Keyword getEndtypeKeyword_11() { return cEndtypeKeyword_11; }
	}
	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSuperTypeCompositionCrossReference_1_1_0 = (CrossReference)cSuperTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cSuperTypeCompositionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cSuperTypeCompositionCrossReference_1_1_0.eContents().get(1);
		
		//TypeParameter:
		//	name=ID ('extends' superType=[Composition|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('extends' superType=[Composition|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('extends' superType=[Composition|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }
		
		//superType=[Composition|QualifiedName]
		public Assignment getSuperTypeAssignment_1_1() { return cSuperTypeAssignment_1_1; }
		
		//[Composition|QualifiedName]
		public CrossReference getSuperTypeCompositionCrossReference_1_1_0() { return cSuperTypeCompositionCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeCompositionQualifiedNameParserRuleCall_1_1_0_1() { return cSuperTypeCompositionQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//////// FEATURES //////	
		//Feature:
		//	Attribute | VariableDeclaration | Parameter | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | VariableDeclaration | Parameter | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_3() { return cOperationParserRuleCall_3; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Attribute:
		//	visibility=VisibilityModifier? 'attribute' name=ID ':' type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityModifier? 'attribute' name=ID ':' type=DataType
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_0_0() { return cVisibilityVisibilityModifierParserRuleCall_0_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=DataType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_4_0() { return cTypeDataTypeParserRuleCall_4_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Parameter:
		//	'parameter' name=ID ':' type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' name=ID ':' type=DataType
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_3_0() { return cTypeDataTypeParserRuleCall_3_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityModifierParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_2_0 = (Keyword)cAbstractAssignment_2.eContents().get(0);
		private final Keyword cOperationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParamsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_6_0_0 = (RuleCall)cParamsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_6_1_1_0 = (RuleCall)cParamsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_8_1_0 = (RuleCall)cTypeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cBlockAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_9_0_0 = (RuleCall)cBlockAssignment_9_0.eContents().get(0);
		private final Keyword cEndoperationKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		
		//Operation:
		//	override?='override'? visibility=VisibilityModifier? abstract?='abstract'? 'operation' name=ID
		//	//('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')? 
		//	'(' (params+=Parameter (',' params+=Parameter)*)? ')' (':' type=DataType)? (block=Block 'endoperation')?;
		@Override public ParserRule getRule() { return rule; }
		
		//override?='override'? visibility=VisibilityModifier? abstract?='abstract'? 'operation' name=ID //('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')? 
		//'(' (params+=Parameter (',' params+=Parameter)*)? ')' (':' type=DataType)? (block=Block 'endoperation')?
		public Group getGroup() { return cGroup; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }
		
		//visibility=VisibilityModifier?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityModifier
		public RuleCall getVisibilityVisibilityModifierParserRuleCall_1_0() { return cVisibilityVisibilityModifierParserRuleCall_1_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_2() { return cAbstractAssignment_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_2_0() { return cAbstractAbstractKeyword_2_0; }
		
		//'operation'
		public Keyword getOperationKeyword_3() { return cOperationKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		////('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')? 
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_6_0() { return cParamsAssignment_6_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_0_0() { return cParamsParameterParserRuleCall_6_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_6_1_1() { return cParamsAssignment_6_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_1_1_0() { return cParamsParameterParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(':' type=DataType)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_8_1_0() { return cTypeDataTypeParserRuleCall_8_1_0; }
		
		//(block=Block 'endoperation')?
		public Group getGroup_9() { return cGroup_9; }
		
		//block=Block
		public Assignment getBlockAssignment_9_0() { return cBlockAssignment_9_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0_0() { return cBlockBlockParserRuleCall_9_0_0; }
		
		//'endoperation'
		public Keyword getEndoperationKeyword_9_1() { return cEndoperationKeyword_9_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Block:
		//	{Block} statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentOrOperationCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLoopStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLetStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExitStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//////// STATEMENTS //////
		//Statement:
		//	VariableDeclaration | AssignmentOrOperationCall | IfStatement | LoopStatement | LetStatement | ReturnStatement |
		//	ExitStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | AssignmentOrOperationCall | IfStatement | LoopStatement | LetStatement | ReturnStatement |
		//ExitStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//AssignmentOrOperationCall
		public RuleCall getAssignmentOrOperationCallParserRuleCall_1() { return cAssignmentOrOperationCallParserRuleCall_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_3() { return cLoopStatementParserRuleCall_3; }
		
		//LetStatement
		public RuleCall getLetStatementParserRuleCall_4() { return cLetStatementParserRuleCall_4; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_5() { return cReturnStatementParserRuleCall_5; }
		
		//ExitStatement
		public RuleCall getExitStatementParserRuleCall_6() { return cExitStatementParserRuleCall_6; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ReturnStatement:
		//	{ReturnStatement} 'return' => expression=Expression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' => expression=Expression?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//=> expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ExitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitStatement:
		//	{ExitStatement} 'exit';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExitStatement} 'exit'
		public Group getGroup() { return cGroup; }
		
		//{ExitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }
		
		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	'variable' name=ID ':' type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID ':' type=DataType
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_3_0() { return cTypeDataTypeParserRuleCall_3_0; }
	}
	public class AssignmentOrOperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.AssignmentOrOperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSymbolReferenceParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSuperExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentOrOperationCallLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssignmentOrOperationCall:
		//	(SymbolReference | SuperExpression) ({AssignmentOrOperationCall.left=current} ':=' right=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(SymbolReference | SuperExpression) ({AssignmentOrOperationCall.left=current} ':=' right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//(SymbolReference | SuperExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//SymbolReference
		public RuleCall getSymbolReferenceParserRuleCall_0_0() { return cSymbolReferenceParserRuleCall_0_0; }
		
		//SuperExpression
		public RuleCall getSuperExpressionParserRuleCall_0_1() { return cSuperExpressionParserRuleCall_0_1; }
		
		//({AssignmentOrOperationCall.left=current} ':=' right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssignmentOrOperationCall.left=current}
		public Action getAssignmentOrOperationCallLeftAction_1_0() { return cAssignmentOrOperationCallLeftAction_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Keyword cEndloopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LoopStatement:
		//	{LoopStatement} 'loop' block=Block 'endloop';
		@Override public ParserRule getRule() { return rule; }
		
		//{LoopStatement} 'loop' block=Block 'endloop'
		public Group getGroup() { return cGroup; }
		
		//{LoopStatement}
		public Action getLoopStatementAction_0() { return cLoopStatementAction_0; }
		
		//'loop'
		public Keyword getLoopKeyword_1() { return cLoopKeyword_1; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
		
		//'endloop'
		public Keyword getEndloopKeyword_3() { return cEndloopKeyword_3; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Assignment cElseIfsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfsElseIfParserRuleCall_4_0 = (RuleCall)cElseIfsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//	'if' expression=Expression 'then' block=Block
		//	elseIfs+=ElseIf* (=> 'else' elseBlock=Block)?
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression=Expression 'then' block=Block elseIfs+=ElseIf* (=> 'else' elseBlock=Block)? 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//elseIfs+=ElseIf*
		public Assignment getElseIfsAssignment_4() { return cElseIfsAssignment_4; }
		
		//ElseIf
		public RuleCall getElseIfsElseIfParserRuleCall_4_0() { return cElseIfsElseIfParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class ElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//ElseIf:
		//	'elseif' expression=Expression 'then' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'elseif' expression=Expression 'then' block=Block
		public Group getGroup() { return cGroup; }
		
		//'elseif'
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class LetStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.LetStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cBeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		private final Assignment cElseLetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseLetsElseLetParserRuleCall_6_0 = (RuleCall)cElseLetsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cElseBlockAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_7_1_0 = (RuleCall)cElseBlockAssignment_7_1.eContents().get(0);
		private final Keyword cEndletKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LetStatement:
		//	'let' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block
		//	elseLets+=ElseLet* (=> 'else' elseBlock=Block)?
		//	'endlet';
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block elseLets+=ElseLet* (=> 'else'
		//elseBlock=Block)? 'endlet'
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }
		
		//'be'
		public Keyword getBeKeyword_2() { return cBeKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
		
		//elseLets+=ElseLet*
		public Assignment getElseLetsAssignment_6() { return cElseLetsAssignment_6; }
		
		//ElseLet
		public RuleCall getElseLetsElseLetParserRuleCall_6_0() { return cElseLetsElseLetParserRuleCall_6_0; }
		
		//(=> 'else' elseBlock=Block)?
		public Group getGroup_7() { return cGroup_7; }
		
		//=> 'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_7_1() { return cElseBlockAssignment_7_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_7_1_0() { return cElseBlockBlockParserRuleCall_7_1_0; }
		
		//'endlet'
		public Keyword getEndletKeyword_8() { return cEndletKeyword_8; }
	}
	public class ElseLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ElseLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseletKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cBeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//ElseLet:
		//	'elselet' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'elselet' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block
		public Group getGroup() { return cGroup; }
		
		//'elselet'
		public Keyword getElseletKeyword_0() { return cElseletKeyword_0; }
		
		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }
		
		//'be'
		public Keyword getBeKeyword_2() { return cBeKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//////// EXPRESSIONS //////
		//Expression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} op='or' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} op='or' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} op='or' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//op='or'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'or'
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualityExpression ({AndExpression.left=current} op='and' right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({AndExpression.left=current} op='and' right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} op='and' right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//op='and'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'and'
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	ComparisonExpression ({EqualityExpression.left=current} op=('=' | '/=') right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({EqualityExpression.left=current} op=('=' | '/=') right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} op=('=' | '/=') right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//op=('=' | '/=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=' | '/=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//'/='
		public Keyword getOpSolidusEqualsSignKeyword_1_1_0_1() { return cOpSolidusEqualsSignKeyword_1_1_0_1; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	AdditiveExpression ({ComparisonExpression.left=current} op=('<' | '<=' | '>' | '>=') right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ComparisonExpression.left=current} op=('<' | '<=' | '>' | '>=') right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} op=('<' | '<=' | '>' | '>=') right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//op=('<' | '<=' | '>' | '>=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<' | '<=' | '>' | '>=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({AdditiveExpression.left=current} op=('+' | '-' | '&') right=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({AdditiveExpression.left=current} op=('+' | '-' | '&') right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({AdditiveExpression.left=current} op=('+' | '-' | '&') right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0() { return cAdditiveExpressionLeftAction_1_0; }
		
		//op=('+' | '-' | '&')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-' | '&')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0_2() { return cOpAmpersandKeyword_1_1_0_2; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpDivKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpModKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	ExponentExpression ({MultiplicativeExpression.left=current} op=('*' | '/' | 'div' | 'mod')
		//	right=ExponentExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentExpression ({MultiplicativeExpression.left=current} op=('*' | '/' | 'div' | 'mod') right=ExponentExpression)*
		public Group getGroup() { return cGroup; }
		
		//ExponentExpression
		public RuleCall getExponentExpressionParserRuleCall_0() { return cExponentExpressionParserRuleCall_0; }
		
		//({MultiplicativeExpression.left=current} op=('*' | '/' | 'div' | 'mod') right=ExponentExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }
		
		//op=('*' | '/' | 'div' | 'mod')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | 'div' | 'mod')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'div'
		public Keyword getOpDivKeyword_1_1_0_2() { return cOpDivKeyword_1_1_0_2; }
		
		//'mod'
		public Keyword getOpModKeyword_1_1_0_3() { return cOpModKeyword_1_1_0_3; }
		
		//right=ExponentExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExponentExpression
		public RuleCall getRightExponentExpressionParserRuleCall_1_2_0() { return cRightExponentExpressionParserRuleCall_1_2_0; }
	}
	public class ExponentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ExponentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpExpKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExponentExpression Expression:
		//	AtomicExpression ({ExponentExpression.left=current} op='exp' right=AtomicExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicExpression ({ExponentExpression.left=current} op='exp' right=AtomicExpression)*
		public Group getGroup() { return cGroup; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_0() { return cAtomicExpressionParserRuleCall_0; }
		
		//({ExponentExpression.left=current} op='exp' right=AtomicExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExponentExpression.left=current}
		public Action getExponentExpressionLeftAction_1_0() { return cExponentExpressionLeftAction_1_0; }
		
		//op='exp'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'exp'
		public Keyword getOpExpKeyword_1_1_0() { return cOpExpKeyword_1_1_0; }
		
		//right=AtomicExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AtomicExpression
		public RuleCall getRightAtomicExpressionParserRuleCall_1_2_0() { return cRightAtomicExpressionParserRuleCall_1_2_0; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSuperExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntegerConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRationalConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueRATIONALTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBooleanConstantAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cValueAlternatives_5_1_0 = (Alternatives)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_5_1_0_0 = (Keyword)cValueAlternatives_5_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_5_1_0_1 = (Keyword)cValueAlternatives_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNullAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNullKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cUnaryAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cOpAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Alternatives cOpAlternatives_7_1_0 = (Alternatives)cOpAssignment_7_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_7_1_0_0 = (Keyword)cOpAlternatives_7_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_7_1_0_1 = (Keyword)cOpAlternatives_7_1_0.eContents().get(1);
		private final Keyword cOpNotKeyword_7_1_0_2 = (Keyword)cOpAlternatives_7_1_0.eContents().get(2);
		private final Assignment cExpressionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cExpressionAtomicExpressionParserRuleCall_7_2_0 = (RuleCall)cExpressionAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cReferenceAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cReferenceKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpressionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpressionAtomicExpressionParserRuleCall_8_2_0 = (RuleCall)cExpressionAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cParenthesizedExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_9_2_0 = (RuleCall)cExpressionAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final RuleCall cListInitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLambdaExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//AtomicExpression Expression:
		//	SymbolReference | SuperExpression | {StringConstant} value=STRING | {IntegerConstant} value=INTEGER |
		//	{RationalConstant} value=RATIONAL | {BooleanConstant} value=('true' | 'false') | {Null} 'null' | {Unary} op=('+' |
		//	'-' | 'not') expression=AtomicExpression | {Reference} 'reference' expression=AtomicExpression |
		//	{ParenthesizedExpression} '(' expression=Expression ')' | ListInit | LambdaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SymbolReference | SuperExpression | {StringConstant} value=STRING | {IntegerConstant} value=INTEGER | {RationalConstant}
		//value=RATIONAL | {BooleanConstant} value=('true' | 'false') | {Null} 'null' | {Unary} op=('+' | '-' | 'not')
		//expression=AtomicExpression | {Reference} 'reference' expression=AtomicExpression | {ParenthesizedExpression} '('
		//expression=Expression ')' | ListInit | LambdaExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SymbolReference
		public RuleCall getSymbolReferenceParserRuleCall_0() { return cSymbolReferenceParserRuleCall_0; }
		
		//SuperExpression
		public RuleCall getSuperExpressionParserRuleCall_1() { return cSuperExpressionParserRuleCall_1; }
		
		//{StringConstant} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstant}
		public Action getStringConstantAction_2_0() { return cStringConstantAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{IntegerConstant} value=INTEGER
		public Group getGroup_3() { return cGroup_3; }
		
		//{IntegerConstant}
		public Action getIntegerConstantAction_3_0() { return cIntegerConstantAction_3_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_3_1_0() { return cValueINTEGERTerminalRuleCall_3_1_0; }
		
		//{RationalConstant} value=RATIONAL
		public Group getGroup_4() { return cGroup_4; }
		
		//{RationalConstant}
		public Action getRationalConstantAction_4_0() { return cRationalConstantAction_4_0; }
		
		//value=RATIONAL
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//RATIONAL
		public RuleCall getValueRATIONALTerminalRuleCall_4_1_0() { return cValueRATIONALTerminalRuleCall_4_1_0; }
		
		//{BooleanConstant} value=('true' | 'false')
		public Group getGroup_5() { return cGroup_5; }
		
		//{BooleanConstant}
		public Action getBooleanConstantAction_5_0() { return cBooleanConstantAction_5_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_5_1_0() { return cValueAlternatives_5_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_5_1_0_0() { return cValueTrueKeyword_5_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_5_1_0_1() { return cValueFalseKeyword_5_1_0_1; }
		
		//{Null} 'null'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Null}
		public Action getNullAction_6_0() { return cNullAction_6_0; }
		
		//'null'
		public Keyword getNullKeyword_6_1() { return cNullKeyword_6_1; }
		
		//{Unary} op=('+' | '-' | 'not') expression=AtomicExpression
		public Group getGroup_7() { return cGroup_7; }
		
		//{Unary}
		public Action getUnaryAction_7_0() { return cUnaryAction_7_0; }
		
		//op=('+' | '-' | 'not')
		public Assignment getOpAssignment_7_1() { return cOpAssignment_7_1; }
		
		//('+' | '-' | 'not')
		public Alternatives getOpAlternatives_7_1_0() { return cOpAlternatives_7_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_7_1_0_0() { return cOpPlusSignKeyword_7_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_7_1_0_1() { return cOpHyphenMinusKeyword_7_1_0_1; }
		
		//'not'
		public Keyword getOpNotKeyword_7_1_0_2() { return cOpNotKeyword_7_1_0_2; }
		
		//expression=AtomicExpression
		public Assignment getExpressionAssignment_7_2() { return cExpressionAssignment_7_2; }
		
		//AtomicExpression
		public RuleCall getExpressionAtomicExpressionParserRuleCall_7_2_0() { return cExpressionAtomicExpressionParserRuleCall_7_2_0; }
		
		//{Reference} 'reference' expression=AtomicExpression
		public Group getGroup_8() { return cGroup_8; }
		
		//{Reference}
		public Action getReferenceAction_8_0() { return cReferenceAction_8_0; }
		
		//'reference'
		public Keyword getReferenceKeyword_8_1() { return cReferenceKeyword_8_1; }
		
		//expression=AtomicExpression
		public Assignment getExpressionAssignment_8_2() { return cExpressionAssignment_8_2; }
		
		//AtomicExpression
		public RuleCall getExpressionAtomicExpressionParserRuleCall_8_2_0() { return cExpressionAtomicExpressionParserRuleCall_8_2_0; }
		
		//{ParenthesizedExpression} '(' expression=Expression ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{ParenthesizedExpression}
		public Action getParenthesizedExpressionAction_9_0() { return cParenthesizedExpressionAction_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_9_2() { return cExpressionAssignment_9_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_9_2_0() { return cExpressionExpressionParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//ListInit
		public RuleCall getListInitParserRuleCall_10() { return cListInitParserRuleCall_10; }
		
		//LambdaExpression
		public RuleCall getLambdaExpressionParserRuleCall_11() { return cLambdaExpressionParserRuleCall_11; }
	}
	public class LambdaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.LambdaExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambdaExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		private final Keyword cEndoperationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LambdaExpression Expression:
		//	{LambdaExpression} 'operation' '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (':' type=DataType)?
		//	block=Block 'endoperation';
		@Override public ParserRule getRule() { return rule; }
		
		//{LambdaExpression} 'operation' '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (':' type=DataType)?
		//block=Block 'endoperation'
		public Group getGroup() { return cGroup; }
		
		//{LambdaExpression}
		public Action getLambdaExpressionAction_0() { return cLambdaExpressionAction_0; }
		
		//'operation'
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' type=DataType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_5_1_0() { return cTypeDataTypeParserRuleCall_5_1_0; }
		
		//block=Block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
		
		//'endoperation'
		public Keyword getEndoperationKeyword_7() { return cEndoperationKeyword_7; }
	}
	public class SuperExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.SuperExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuperExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMemberCallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemberCallSymbolReferenceParserRuleCall_3_0 = (RuleCall)cMemberCallAssignment_3.eContents().get(0);
		
		//SuperExpression:
		//	{SuperExpression} 'super' '.' memberCall=SymbolReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{SuperExpression} 'super' '.' memberCall=SymbolReference
		public Group getGroup() { return cGroup; }
		
		//{SuperExpression}
		public Action getSuperExpressionAction_0() { return cSuperExpressionAction_0; }
		
		//'super'
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//memberCall=SymbolReference
		public Assignment getMemberCallAssignment_3() { return cMemberCallAssignment_3; }
		
		//SymbolReference
		public RuleCall getMemberCallSymbolReferenceParserRuleCall_3_0() { return cMemberCallSymbolReferenceParserRuleCall_3_0; }
	}
	public class SymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.SymbolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSymbolNamedElementCrossReference_0_0 = (CrossReference)cSymbolAssignment_0.eContents().get(0);
		private final RuleCall cSymbolNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cSymbolNamedElementCrossReference_0_0.eContents().get(1);
		private final Assignment cCompositionInitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompositionInitSymbolRefCompositionInitParserRuleCall_1_0 = (RuleCall)cCompositionInitAssignment_1.eContents().get(0);
		private final Assignment cAccessModifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessModifierSymbolRefAccessModifierParserRuleCall_2_0 = (RuleCall)cAccessModifierAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberCallAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMemberCallSymbolReferenceParserRuleCall_3_1_0 = (RuleCall)cMemberCallAssignment_3_1.eContents().get(0);
		
		//SymbolReference:
		//	symbol=[NamedElement] compositionInit=SymbolRefCompositionInit?
		//	accessModifier=SymbolRefAccessModifier? ('.' memberCall=SymbolReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=[NamedElement] compositionInit=SymbolRefCompositionInit? accessModifier=SymbolRefAccessModifier? ('.'
		//memberCall=SymbolReference)?
		public Group getGroup() { return cGroup; }
		
		//symbol=[NamedElement]
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//[NamedElement]
		public CrossReference getSymbolNamedElementCrossReference_0_0() { return cSymbolNamedElementCrossReference_0_0; }
		
		//ID
		public RuleCall getSymbolNamedElementIDTerminalRuleCall_0_0_1() { return cSymbolNamedElementIDTerminalRuleCall_0_0_1; }
		
		////(=>'<' types+=DataType ("," types+=DataType)* '>')?	// leads to issues with comparative operators < and > in expressions
		//compositionInit=SymbolRefCompositionInit?
		public Assignment getCompositionInitAssignment_1() { return cCompositionInitAssignment_1; }
		
		//SymbolRefCompositionInit
		public RuleCall getCompositionInitSymbolRefCompositionInitParserRuleCall_1_0() { return cCompositionInitSymbolRefCompositionInitParserRuleCall_1_0; }
		
		//accessModifier=SymbolRefAccessModifier?
		public Assignment getAccessModifierAssignment_2() { return cAccessModifierAssignment_2; }
		
		//SymbolRefAccessModifier
		public RuleCall getAccessModifierSymbolRefAccessModifierParserRuleCall_2_0() { return cAccessModifierSymbolRefAccessModifierParserRuleCall_2_0; }
		
		//('.' memberCall=SymbolReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//memberCall=SymbolReference
		public Assignment getMemberCallAssignment_3_1() { return cMemberCallAssignment_3_1; }
		
		//SymbolReference
		public RuleCall getMemberCallSymbolReferenceParserRuleCall_3_1_0() { return cMemberCallSymbolReferenceParserRuleCall_3_1_0; }
	}
	public class SymbolRefAccessModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.SymbolRefAccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperationInvocationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cParamsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_0_2_0_0 = (RuleCall)cParamsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_0_2_1_1_0 = (RuleCall)cParamsAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAccessModifierAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0 = (RuleCall)cAccessModifierAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cListAccessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAccessModifierAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0 = (RuleCall)cAccessModifierAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDereferenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAccessModifierAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0 = (RuleCall)cAccessModifierAssignment_2_2.eContents().get(0);
		
		//SymbolRefAccessModifier:
		//	{OperationInvocation} '(' (params+=Expression (',' params+=Expression)*)? ')' accessModifier=SymbolRefAccessModifier?
		//	| {ListAccess} '[' index=Expression ']' accessModifier=SymbolRefAccessModifier? | {Dereference} '@'
		//	accessModifier=SymbolRefAccessModifier?;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperationInvocation} '(' (params+=Expression (',' params+=Expression)*)? ')' accessModifier=SymbolRefAccessModifier? |
		//{ListAccess} '[' index=Expression ']' accessModifier=SymbolRefAccessModifier? | {Dereference} '@'
		//accessModifier=SymbolRefAccessModifier?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperationInvocation} '(' (params+=Expression (',' params+=Expression)*)? ')' accessModifier=SymbolRefAccessModifier?
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperationInvocation}
		public Action getOperationInvocationAction_0_0() { return cOperationInvocationAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//(params+=Expression (',' params+=Expression)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//params+=Expression
		public Assignment getParamsAssignment_0_2_0() { return cParamsAssignment_0_2_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_0_2_0_0() { return cParamsExpressionParserRuleCall_0_2_0_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_0_2_1_1() { return cParamsAssignment_0_2_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_0_2_1_1_0() { return cParamsExpressionParserRuleCall_0_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//accessModifier=SymbolRefAccessModifier?
		public Assignment getAccessModifierAssignment_0_4() { return cAccessModifierAssignment_0_4; }
		
		//SymbolRefAccessModifier
		public RuleCall getAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0() { return cAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0; }
		
		//{ListAccess} '[' index=Expression ']' accessModifier=SymbolRefAccessModifier?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ListAccess}
		public Action getListAccessAction_1_0() { return cListAccessAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_2_0() { return cIndexExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//accessModifier=SymbolRefAccessModifier?
		public Assignment getAccessModifierAssignment_1_4() { return cAccessModifierAssignment_1_4; }
		
		//SymbolRefAccessModifier
		public RuleCall getAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0() { return cAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0; }
		
		//{Dereference} '@' accessModifier=SymbolRefAccessModifier?
		public Group getGroup_2() { return cGroup_2; }
		
		//{Dereference}
		public Action getDereferenceAction_2_0() { return cDereferenceAction_2_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2_1() { return cCommercialAtKeyword_2_1; }
		
		//accessModifier=SymbolRefAccessModifier?
		public Assignment getAccessModifierAssignment_2_2() { return cAccessModifierAssignment_2_2; }
		
		//SymbolRefAccessModifier
		public RuleCall getAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0() { return cAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0; }
	}
	public class SymbolRefCompositionInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.SymbolRefCompositionInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolRefCompositionInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SymbolRefCompositionInit:
		//	{SymbolRefCompositionInit} '{' (attributes+=SymbolRefCompositionAttribute (','
		//	attributes+=SymbolRefCompositionAttribute)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SymbolRefCompositionInit} '{' (attributes+=SymbolRefCompositionAttribute (','
		//attributes+=SymbolRefCompositionAttribute)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SymbolRefCompositionInit}
		public Action getSymbolRefCompositionInitAction_0() { return cSymbolRefCompositionInitAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attributes+=SymbolRefCompositionAttribute (',' attributes+=SymbolRefCompositionAttribute)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attributes+=SymbolRefCompositionAttribute
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }
		
		//SymbolRefCompositionAttribute
		public RuleCall getAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0() { return cAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0; }
		
		//(',' attributes+=SymbolRefCompositionAttribute)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//attributes+=SymbolRefCompositionAttribute
		public Assignment getAttributesAssignment_2_1_1() { return cAttributesAssignment_2_1_1; }
		
		//SymbolRefCompositionAttribute
		public RuleCall getAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0() { return cAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SymbolRefCompositionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.SymbolRefCompositionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SymbolRefCompositionAttribute:
		//	attribute=[Attribute] '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute] '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ListInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ListInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_2_0_0 = (RuleCall)cLeftAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cRightAlternatives_2_1_0 = (Alternatives)cRightAssignment_2_1.eContents().get(0);
		private final RuleCall cRightListInitFunctionParserRuleCall_2_1_0_0 = (RuleCall)cRightAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cRightListInitElementsParserRuleCall_2_1_0_1 = (RuleCall)cRightAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListInit:
		//	{ListInit} "[" (left=Expression right=(ListInitFunction | ListInitElements))? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{ListInit} "[" (left=Expression right=(ListInitFunction | ListInitElements))? "]"
		public Group getGroup() { return cGroup; }
		
		//{ListInit}
		public Action getListInitAction_0() { return cListInitAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(left=Expression right=(ListInitFunction | ListInitElements))?
		public Group getGroup_2() { return cGroup_2; }
		
		//left=Expression
		public Assignment getLeftAssignment_2_0() { return cLeftAssignment_2_0; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0_0() { return cLeftExpressionParserRuleCall_2_0_0; }
		
		//right=(ListInitFunction | ListInitElements)
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }
		
		//(ListInitFunction | ListInitElements)
		public Alternatives getRightAlternatives_2_1_0() { return cRightAlternatives_2_1_0; }
		
		//ListInitFunction
		public RuleCall getRightListInitFunctionParserRuleCall_2_1_0_0() { return cRightListInitFunctionParserRuleCall_2_1_0_0; }
		
		//ListInitElements
		public RuleCall getRightListInitElementsParserRuleCall_2_1_0_1() { return cRightListInitElementsParserRuleCall_2_1_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ListInitFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ListInitFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListInitFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpAsteriskAsteriskKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpFullStopFullStopKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ListInitFunction:
		//	{ListInitFunction} op=("**" | "..") expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListInitFunction} op=("**" | "..") expression=Expression
		public Group getGroup() { return cGroup; }
		
		//{ListInitFunction}
		public Action getListInitFunctionAction_0() { return cListInitFunctionAction_0; }
		
		//op=("**" | "..")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//("**" | "..")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//"**"
		public Keyword getOpAsteriskAsteriskKeyword_1_0_0() { return cOpAsteriskAsteriskKeyword_1_0_0; }
		
		//".."
		public Keyword getOpFullStopFullStopKeyword_1_0_1() { return cOpFullStopFullStopKeyword_1_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ListInitElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ListInitElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListInitElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//ListInitElements:
		//	{ListInitElements} ("," elements+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListInitElements} ("," elements+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//{ListInitElements}
		public Action getListInitElementsAction_0() { return cListInitElementsAction_0; }
		
		//("," elements+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_1_0() { return cElementsExpressionParserRuleCall_1_1_0; }
	}
	
	
	private final CompilationUnitElements pCompilationUnit;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final MainProcedureElements pMainProcedure;
	private final ProgramElementElements pProgramElement;
	private final NamedElementElements pNamedElement;
	private final DataTypeElements pDataType;
	private final DeclaredTypeElements pDeclaredType;
	private final BasicTypeElements pBasicType;
	private final ReferenceTypeElements pReferenceType;
	private final ListTypeElements pListType;
	private final OperationTypeElements pOperationType;
	private final VisibilityModifierElements pVisibilityModifier;
	private final TypeDeclarationElements pTypeDeclaration;
	private final EnumerationElements pEnumeration;
	private final EnumerationValueElements pEnumerationValue;
	private final CompositionElements pComposition;
	private final TypeParameterElements pTypeParameter;
	private final FeatureElements pFeature;
	private final AttributeElements pAttribute;
	private final ParameterElements pParameter;
	private final OperationElements pOperation;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ExitStatementElements pExitStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final AssignmentOrOperationCallElements pAssignmentOrOperationCall;
	private final LoopStatementElements pLoopStatement;
	private final IfStatementElements pIfStatement;
	private final ElseIfElements pElseIf;
	private final LetStatementElements pLetStatement;
	private final ElseLetElements pElseLet;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final ExponentExpressionElements pExponentExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final LambdaExpressionElements pLambdaExpression;
	private final SuperExpressionElements pSuperExpression;
	private final SymbolReferenceElements pSymbolReference;
	private final SymbolRefAccessModifierElements pSymbolRefAccessModifier;
	private final SymbolRefCompositionInitElements pSymbolRefCompositionInit;
	private final SymbolRefCompositionAttributeElements pSymbolRefCompositionAttribute;
	private final ListInitElements pListInit;
	private final ListInitFunctionElements pListInitFunction;
	private final ListInitElementsElements pListInitElements;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tINTEGER;
	private final TerminalRule tRATIONAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MuLEGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompilationUnit = new CompilationUnitElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pMainProcedure = new MainProcedureElements();
		this.pProgramElement = new ProgramElementElements();
		this.pNamedElement = new NamedElementElements();
		this.pDataType = new DataTypeElements();
		this.pDeclaredType = new DeclaredTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pReferenceType = new ReferenceTypeElements();
		this.pListType = new ListTypeElements();
		this.pOperationType = new OperationTypeElements();
		this.pVisibilityModifier = new VisibilityModifierElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumerationValue = new EnumerationValueElements();
		this.pComposition = new CompositionElements();
		this.pTypeParameter = new TypeParameterElements();
		this.pFeature = new FeatureElements();
		this.pAttribute = new AttributeElements();
		this.pParameter = new ParameterElements();
		this.pOperation = new OperationElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pExitStatement = new ExitStatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pAssignmentOrOperationCall = new AssignmentOrOperationCallElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIf = new ElseIfElements();
		this.pLetStatement = new LetStatementElements();
		this.pElseLet = new ElseLetElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pExponentExpression = new ExponentExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pLambdaExpression = new LambdaExpressionElements();
		this.pSuperExpression = new SuperExpressionElements();
		this.pSymbolReference = new SymbolReferenceElements();
		this.pSymbolRefAccessModifier = new SymbolRefAccessModifierElements();
		this.pSymbolRefCompositionInit = new SymbolRefCompositionInitElements();
		this.pSymbolRefCompositionAttribute = new SymbolRefCompositionAttributeElements();
		this.pListInit = new ListInitElements();
		this.pListInitFunction = new ListInitFunctionElements();
		this.pListInitElements = new ListInitElementsElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.STRING");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.INTEGER");
		this.tRATIONAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.ubt.ai1.mule.MuLE.RATIONAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.ubt.ai1.mule.MuLE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompilationUnit:
	//	(isProgram?='program' | isLibrary?='library') name=ID
	//	imports+=Import*
	//	programElements+=ProgramElement*
	//	main=MainProcedure?;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=[CompilationUnit];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//MainProcedure:
	//	{MainProcedure} 'main' block=Block 'endmain';
	public MainProcedureElements getMainProcedureAccess() {
		return pMainProcedure;
	}
	
	public ParserRule getMainProcedureRule() {
		return getMainProcedureAccess().getRule();
	}
	
	//ProgramElement:
	//	TypeDeclaration | Operation;
	public ProgramElementElements getProgramElementAccess() {
		return pProgramElement;
	}
	
	public ParserRule getProgramElementRule() {
		return getProgramElementAccess().getRule();
	}
	
	//NamedElement:
	//	EnumerationValue | TypeDeclaration | Feature | CompilationUnit;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//////// DATA TYPES //////
	//DataType:
	//	BasicType | DeclaredType | ReferenceType | ListType | OperationType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//DeclaredType:
	//	type=[TypeDeclaration|QualifiedName] ('<' typeParams+=DataType (',' typeParams+=DataType)* '>')?;
	public DeclaredTypeElements getDeclaredTypeAccess() {
		return pDeclaredType;
	}
	
	public ParserRule getDeclaredTypeRule() {
		return getDeclaredTypeAccess().getRule();
	}
	
	//BasicType:
	//	typeName=('integer' | 'rational' | 'string' | 'boolean');
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//ReferenceType:
	//	'reference' '<' type=DataType '>';
	public ReferenceTypeElements getReferenceTypeAccess() {
		return pReferenceType;
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}
	
	//ListType:
	//	'list' '<' type=DataType '>';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//OperationType:
	//	{OperationType} 'operation' '(' (paramTypes+=DataType (',' paramTypes+=DataType)*)? ')' (':' type=DataType)?;
	public OperationTypeElements getOperationTypeAccess() {
		return pOperationType;
	}
	
	public ParserRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//VisibilityModifier:
	//	'private' | 'protected';
	public VisibilityModifierElements getVisibilityModifierAccess() {
		return pVisibilityModifier;
	}
	
	public ParserRule getVisibilityModifierRule() {
		return getVisibilityModifierAccess().getRule();
	}
	
	//TypeDeclaration:
	//	Composition | Enumeration | TypeParameter;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//Enumeration:
	//	visibility=VisibilityModifier? 'type' name=ID ':' 'enumeration' values+=EnumerationValue (','
	//	values+=EnumerationValue)* 'endtype';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//EnumerationValue:
	//	name=ID;
	public EnumerationValueElements getEnumerationValueAccess() {
		return pEnumerationValue;
	}
	
	public ParserRule getEnumerationValueRule() {
		return getEnumerationValueAccess().getRule();
	}
	
	//Composition:
	//	visibility=VisibilityModifier? abstract?='abstract'? 'type' name=ID ('<' typeParams+=TypeParameter (','
	//	typeParams+=TypeParameter)* '>')?
	//	':' 'composition' ('extends' superType=[Composition|QualifiedName] ('<' superTypeParams+=TypeParameter (','
	//	superTypeParams+=TypeParameter)* '>')?)?
	//	typeDeclarations+=TypeDeclaration*
	//	attributes+=Attribute*
	//	operations+=Operation*
	//	'endtype';
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//TypeParameter:
	//	name=ID ('extends' superType=[Composition|QualifiedName])?;
	public TypeParameterElements getTypeParameterAccess() {
		return pTypeParameter;
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}
	
	//////// FEATURES //////	
	//Feature:
	//	Attribute | VariableDeclaration | Parameter | Operation;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Attribute:
	//	visibility=VisibilityModifier? 'attribute' name=ID ':' type=DataType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Parameter:
	//	'parameter' name=ID ':' type=DataType;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Operation:
	//	override?='override'? visibility=VisibilityModifier? abstract?='abstract'? 'operation' name=ID
	//	//('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')? 
	//	'(' (params+=Parameter (',' params+=Parameter)*)? ')' (':' type=DataType)? (block=Block 'endoperation')?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Block:
	//	{Block} statements+=Statement*;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//////// STATEMENTS //////
	//Statement:
	//	VariableDeclaration | AssignmentOrOperationCall | IfStatement | LoopStatement | LetStatement | ReturnStatement |
	//	ExitStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	{ReturnStatement} 'return' => expression=Expression?;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ExitStatement:
	//	{ExitStatement} 'exit';
	public ExitStatementElements getExitStatementAccess() {
		return pExitStatement;
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//	'variable' name=ID ':' type=DataType;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//AssignmentOrOperationCall:
	//	(SymbolReference | SuperExpression) ({AssignmentOrOperationCall.left=current} ':=' right=Expression)?;
	public AssignmentOrOperationCallElements getAssignmentOrOperationCallAccess() {
		return pAssignmentOrOperationCall;
	}
	
	public ParserRule getAssignmentOrOperationCallRule() {
		return getAssignmentOrOperationCallAccess().getRule();
	}
	
	//LoopStatement:
	//	{LoopStatement} 'loop' block=Block 'endloop';
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' expression=Expression 'then' block=Block
	//	elseIfs+=ElseIf* (=> 'else' elseBlock=Block)?
	//	'endif';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseIf:
	//	'elseif' expression=Expression 'then' block=Block;
	public ElseIfElements getElseIfAccess() {
		return pElseIf;
	}
	
	public ParserRule getElseIfRule() {
		return getElseIfAccess().getRule();
	}
	
	//LetStatement:
	//	'let' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block
	//	elseLets+=ElseLet* (=> 'else' elseBlock=Block)?
	//	'endlet';
	public LetStatementElements getLetStatementAccess() {
		return pLetStatement;
	}
	
	public ParserRule getLetStatementRule() {
		return getLetStatementAccess().getRule();
	}
	
	//ElseLet:
	//	'elselet' variable=VariableDeclaration 'be' expression=Expression 'do' block=Block;
	public ElseLetElements getElseLetAccess() {
		return pElseLet;
	}
	
	public ParserRule getElseLetRule() {
		return getElseLetAccess().getRule();
	}
	
	//////// EXPRESSIONS //////
	//Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} op='or' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	EqualityExpression ({AndExpression.left=current} op='and' right=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	ComparisonExpression ({EqualityExpression.left=current} op=('=' | '/=') right=ComparisonExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//ComparisonExpression Expression:
	//	AdditiveExpression ({ComparisonExpression.left=current} op=('<' | '<=' | '>' | '>=') right=AdditiveExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} op=('+' | '-' | '&') right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	ExponentExpression ({MultiplicativeExpression.left=current} op=('*' | '/' | 'div' | 'mod')
	//	right=ExponentExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//ExponentExpression Expression:
	//	AtomicExpression ({ExponentExpression.left=current} op='exp' right=AtomicExpression)*;
	public ExponentExpressionElements getExponentExpressionAccess() {
		return pExponentExpression;
	}
	
	public ParserRule getExponentExpressionRule() {
		return getExponentExpressionAccess().getRule();
	}
	
	//AtomicExpression Expression:
	//	SymbolReference | SuperExpression | {StringConstant} value=STRING | {IntegerConstant} value=INTEGER |
	//	{RationalConstant} value=RATIONAL | {BooleanConstant} value=('true' | 'false') | {Null} 'null' | {Unary} op=('+' |
	//	'-' | 'not') expression=AtomicExpression | {Reference} 'reference' expression=AtomicExpression |
	//	{ParenthesizedExpression} '(' expression=Expression ')' | ListInit | LambdaExpression;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//LambdaExpression Expression:
	//	{LambdaExpression} 'operation' '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (':' type=DataType)?
	//	block=Block 'endoperation';
	public LambdaExpressionElements getLambdaExpressionAccess() {
		return pLambdaExpression;
	}
	
	public ParserRule getLambdaExpressionRule() {
		return getLambdaExpressionAccess().getRule();
	}
	
	//SuperExpression:
	//	{SuperExpression} 'super' '.' memberCall=SymbolReference;
	public SuperExpressionElements getSuperExpressionAccess() {
		return pSuperExpression;
	}
	
	public ParserRule getSuperExpressionRule() {
		return getSuperExpressionAccess().getRule();
	}
	
	//SymbolReference:
	//	symbol=[NamedElement] compositionInit=SymbolRefCompositionInit?
	//	accessModifier=SymbolRefAccessModifier? ('.' memberCall=SymbolReference)?;
	public SymbolReferenceElements getSymbolReferenceAccess() {
		return pSymbolReference;
	}
	
	public ParserRule getSymbolReferenceRule() {
		return getSymbolReferenceAccess().getRule();
	}
	
	//SymbolRefAccessModifier:
	//	{OperationInvocation} '(' (params+=Expression (',' params+=Expression)*)? ')' accessModifier=SymbolRefAccessModifier?
	//	| {ListAccess} '[' index=Expression ']' accessModifier=SymbolRefAccessModifier? | {Dereference} '@'
	//	accessModifier=SymbolRefAccessModifier?;
	public SymbolRefAccessModifierElements getSymbolRefAccessModifierAccess() {
		return pSymbolRefAccessModifier;
	}
	
	public ParserRule getSymbolRefAccessModifierRule() {
		return getSymbolRefAccessModifierAccess().getRule();
	}
	
	//SymbolRefCompositionInit:
	//	{SymbolRefCompositionInit} '{' (attributes+=SymbolRefCompositionAttribute (','
	//	attributes+=SymbolRefCompositionAttribute)*)? '}';
	public SymbolRefCompositionInitElements getSymbolRefCompositionInitAccess() {
		return pSymbolRefCompositionInit;
	}
	
	public ParserRule getSymbolRefCompositionInitRule() {
		return getSymbolRefCompositionInitAccess().getRule();
	}
	
	//SymbolRefCompositionAttribute:
	//	attribute=[Attribute] '=' expression=Expression;
	public SymbolRefCompositionAttributeElements getSymbolRefCompositionAttributeAccess() {
		return pSymbolRefCompositionAttribute;
	}
	
	public ParserRule getSymbolRefCompositionAttributeRule() {
		return getSymbolRefCompositionAttributeAccess().getRule();
	}
	
	//ListInit:
	//	{ListInit} "[" (left=Expression right=(ListInitFunction | ListInitElements))? "]";
	public ListInitElements getListInitAccess() {
		return pListInit;
	}
	
	public ParserRule getListInitRule() {
		return getListInitAccess().getRule();
	}
	
	//ListInitFunction:
	//	{ListInitFunction} op=("**" | "..") expression=Expression;
	public ListInitFunctionElements getListInitFunctionAccess() {
		return pListInitFunction;
	}
	
	public ParserRule getListInitFunctionRule() {
		return getListInitFunctionAccess().getRule();
	}
	
	//ListInitElements:
	//	{ListInitElements} ("," elements+=Expression)*;
	public ListInitElementsElements getListInitElementsAccess() {
		return pListInitElements;
	}
	
	public ParserRule getListInitElementsRule() {
		return getListInitElementsAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INTEGER:
	//	INT;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal RATIONAL:
	//	INT '.' INT ('E' ('+' | '-')? INT)?;
	public TerminalRule getRATIONALRule() {
		return tRATIONAL;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
