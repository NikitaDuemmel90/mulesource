/*
 * generated by Xtext 2.19.0
 */
grammar InternalMuLE;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.ubt.ai1.mule.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.ubt.ai1.mule.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.ubt.ai1.mule.services.MuLEGrammarAccess;

}

@parser::members {

 	private MuLEGrammarAccess grammarAccess;

    public InternalMuLEParser(TokenStream input, MuLEGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";
   	}

   	@Override
   	protected MuLEGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	iv_ruleCompilationUnit=ruleCompilationUnit
	{ $current=$iv_ruleCompilationUnit.current; }
	EOF;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_isProgram_0_0='program'
					{
						newLeafNode(lv_isProgram_0_0, grammarAccess.getCompilationUnitAccess().getIsProgramProgramKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompilationUnitRule());
						}
						setWithLastConsumed($current, "isProgram", true, "program");
					}
				)
			)
			    |
			(
				(
					lv_isLibrary_1_0='library'
					{
						newLeafNode(lv_isLibrary_1_0, grammarAccess.getCompilationUnitAccess().getIsLibraryLibraryKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompilationUnitRule());
						}
						setWithLastConsumed($current, "isLibrary", true, "library");
					}
				)
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCompilationUnitAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompilationUnitRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompilationUnitAccess().getImportsImportParserRuleCall_2_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"de.ubt.ai1.mule.MuLE.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCompilationUnitAccess().getProgramElementsProgramElementParserRuleCall_3_0());
				}
				lv_programElements_4_0=ruleProgramElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
					}
					add(
						$current,
						"programElements",
						lv_programElements_4_0,
						"de.ubt.ai1.mule.MuLE.ProgramElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCompilationUnitAccess().getMainMainProcedureParserRuleCall_4_0());
				}
				lv_main_5_0=ruleMainProcedure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
					}
					set(
						$current,
						"main",
						lv_main_5_0,
						"de.ubt.ai1.mule.MuLE.MainProcedure");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getImportAccess().getImportedNamespaceCompilationUnitCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleMainProcedure
entryRuleMainProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainProcedureRule()); }
	iv_ruleMainProcedure=ruleMainProcedure
	{ $current=$iv_ruleMainProcedure.current; }
	EOF;

// Rule MainProcedure
ruleMainProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMainProcedureAccess().getMainProcedureAction_0(),
					$current);
			}
		)
		otherlv_1='main'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainProcedureAccess().getMainKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainProcedureAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainProcedureRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='endmain'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainProcedureAccess().getEndmainKeyword_3());
		}
	)
;

// Entry rule entryRuleProgramElement
entryRuleProgramElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramElementRule()); }
	iv_ruleProgramElement=ruleProgramElement
	{ $current=$iv_ruleProgramElement.current; }
	EOF;

// Rule ProgramElement
ruleProgramElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramElementAccess().getTypeDeclarationParserRuleCall_0());
		}
		this_TypeDeclaration_0=ruleTypeDeclaration
		{
			$current = $this_TypeDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProgramElementAccess().getOperationParserRuleCall_1());
		}
		this_Operation_1=ruleOperation
		{
			$current = $this_Operation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getBasicTypeParserRuleCall_0());
		}
		this_BasicType_0=ruleBasicType
		{
			$current = $this_BasicType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getDeclaredTypeParserRuleCall_1());
		}
		this_DeclaredType_1=ruleDeclaredType
		{
			$current = $this_DeclaredType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getReferenceTypeParserRuleCall_2());
		}
		this_ReferenceType_2=ruleReferenceType
		{
			$current = $this_ReferenceType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getListTypeParserRuleCall_3());
		}
		this_ListType_3=ruleListType
		{
			$current = $this_ListType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getOperationTypeParserRuleCall_4());
		}
		this_OperationType_4=ruleOperationType
		{
			$current = $this_OperationType_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeclaredType
entryRuleDeclaredType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredTypeRule()); }
	iv_ruleDeclaredType=ruleDeclaredType
	{ $current=$iv_ruleDeclaredType.current; }
	EOF;

// Rule DeclaredType
ruleDeclaredType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclaredTypeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDeclaredTypeAccess().getTypeTypeDeclarationCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getDeclaredTypeAccess().getLessThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_1_0());
					}
					lv_typeParams_2_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclaredTypeRule());
						}
						add(
							$current,
							"typeParams",
							lv_typeParams_2_0,
							"de.ubt.ai1.mule.MuLE.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getDeclaredTypeAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_2_1_0());
						}
						lv_typeParams_4_0=ruleDataType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDeclaredTypeRule());
							}
							add(
								$current,
								"typeParams",
								lv_typeParams_4_0,
								"de.ubt.ai1.mule.MuLE.DataType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='>'
			{
				newLeafNode(otherlv_5, grammarAccess.getDeclaredTypeAccess().getGreaterThanSignKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current; }
	EOF;

// Rule BasicType
ruleBasicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1='integer'
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getBasicTypeAccess().getTypeNameIntegerKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2='rational'
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getBasicTypeAccess().getTypeNameRationalKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
				    |
				lv_typeName_0_3='string'
				{
					newLeafNode(lv_typeName_0_3, grammarAccess.getBasicTypeAccess().getTypeNameStringKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_3, null);
				}
				    |
				lv_typeName_0_4='boolean'
				{
					newLeafNode(lv_typeName_0_4, grammarAccess.getBasicTypeAccess().getTypeNameBooleanKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleReferenceType
entryRuleReferenceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceTypeRule()); }
	iv_ruleReferenceType=ruleReferenceType
	{ $current=$iv_ruleReferenceType.current; }
	EOF;

// Rule ReferenceType
ruleReferenceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reference'
		{
			newLeafNode(otherlv_0, grammarAccess.getReferenceTypeAccess().getReferenceKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getReferenceTypeAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceTypeAccess().getTypeDataTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.ubt.ai1.mule.MuLE.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getReferenceTypeAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleListType
entryRuleListType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListTypeRule()); }
	iv_ruleListType=ruleListType
	{ $current=$iv_ruleListType.current; }
	EOF;

// Rule ListType
ruleListType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='list'
		{
			newLeafNode(otherlv_0, grammarAccess.getListTypeAccess().getListKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getListTypeAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListTypeAccess().getTypeDataTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.ubt.ai1.mule.MuLE.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleOperationType
entryRuleOperationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationTypeRule()); }
	iv_ruleOperationType=ruleOperationType
	{ $current=$iv_ruleOperationType.current; }
	EOF;

// Rule OperationType
ruleOperationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOperationTypeAccess().getOperationTypeAction_0(),
					$current);
			}
		)
		otherlv_1='operation'
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationTypeAccess().getOperationKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_0_0());
					}
					lv_paramTypes_3_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationTypeRule());
						}
						add(
							$current,
							"paramTypes",
							lv_paramTypes_3_0,
							"de.ubt.ai1.mule.MuLE.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperationTypeAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_1_1_0());
						}
						lv_paramTypes_5_0=ruleDataType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationTypeRule());
							}
							add(
								$current,
								"paramTypes",
								lv_paramTypes_5_0,
								"de.ubt.ai1.mule.MuLE.DataType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationTypeAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getOperationTypeAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationTypeAccess().getTypeDataTypeParserRuleCall_5_1_0());
					}
					lv_type_8_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_8_0,
							"de.ubt.ai1.mule.MuLE.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVisibilityModifier
entryRuleVisibilityModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVisibilityModifierRule()); }
	iv_ruleVisibilityModifier=ruleVisibilityModifier
	{ $current=$iv_ruleVisibilityModifier.current.getText(); }
	EOF;

// Rule VisibilityModifier
ruleVisibilityModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='private'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVisibilityModifierAccess().getPrivateKeyword_0());
		}
		    |
		kw='protected'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVisibilityModifierAccess().getProtectedKeyword_1());
		}
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getCompositionParserRuleCall_0());
		}
		this_Composition_0=ruleComposition
		{
			$current = $this_Composition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getEnumerationParserRuleCall_1());
		}
		this_Enumeration_1=ruleEnumeration
		{
			$current = $this_Enumeration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeParameterParserRuleCall_2());
		}
		this_TypeParameter_2=ruleTypeParameter
		{
			$current = $this_TypeParameter_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current; }
	EOF;

// Rule Enumeration
ruleEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getVisibilityVisibilityModifierParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibilityModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"de.ubt.ai1.mule.MuLE.VisibilityModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='type'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationAccess().getTypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumerationAccess().getColonKeyword_3());
		}
		otherlv_4='enumeration'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumerationAccess().getEnumerationKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_5_0());
				}
				lv_values_5_0=ruleEnumerationValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					add(
						$current,
						"values",
						lv_values_5_0,
						"de.ubt.ai1.mule.MuLE.EnumerationValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getEnumerationAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_6_1_0());
					}
					lv_values_7_0=ruleEnumerationValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationRule());
						}
						add(
							$current,
							"values",
							lv_values_7_0,
							"de.ubt.ai1.mule.MuLE.EnumerationValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='endtype'
		{
			newLeafNode(otherlv_8, grammarAccess.getEnumerationAccess().getEndtypeKeyword_7());
		}
	)
;

// Entry rule entryRuleEnumerationValue
entryRuleEnumerationValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationValueRule()); }
	iv_ruleEnumerationValue=ruleEnumerationValue
	{ $current=$iv_ruleEnumerationValue.current; }
	EOF;

// Rule EnumerationValue
ruleEnumerationValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getEnumerationValueAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumerationValueRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"de.ubt.ai1.mule.MuLE.ID");
			}
		)
	)
;

// Entry rule entryRuleComposition
entryRuleComposition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositionRule()); }
	iv_ruleComposition=ruleComposition
	{ $current=$iv_ruleComposition.current; }
	EOF;

// Rule Composition
ruleComposition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getVisibilityVisibilityModifierParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibilityModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"de.ubt.ai1.mule.MuLE.VisibilityModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_abstract_1_0='abstract'
				{
					newLeafNode(lv_abstract_1_0, grammarAccess.getCompositionAccess().getAbstractAbstractKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
					setWithLastConsumed($current, "abstract", true, "abstract");
				}
			)
		)?
		otherlv_2='type'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompositionAccess().getTypeKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		(
			otherlv_4='<'
			{
				newLeafNode(otherlv_4, grammarAccess.getCompositionAccess().getLessThanSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_1_0());
					}
					lv_typeParams_5_0=ruleTypeParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositionRule());
						}
						add(
							$current,
							"typeParams",
							lv_typeParams_5_0,
							"de.ubt.ai1.mule.MuLE.TypeParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getCompositionAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_2_1_0());
						}
						lv_typeParams_7_0=ruleTypeParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompositionRule());
							}
							add(
								$current,
								"typeParams",
								lv_typeParams_7_0,
								"de.ubt.ai1.mule.MuLE.TypeParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='>'
			{
				newLeafNode(otherlv_8, grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_4_3());
			}
		)?
		otherlv_9=':'
		{
			newLeafNode(otherlv_9, grammarAccess.getCompositionAccess().getColonKeyword_5());
		}
		otherlv_10='composition'
		{
			newLeafNode(otherlv_10, grammarAccess.getCompositionAccess().getCompositionKeyword_6());
		}
		(
			otherlv_11='extends'
			{
				newLeafNode(otherlv_11, grammarAccess.getCompositionAccess().getExtendsKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCompositionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getCompositionAccess().getSuperTypeCompositionCrossReference_7_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13='<'
				{
					newLeafNode(otherlv_13, grammarAccess.getCompositionAccess().getLessThanSignKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0());
						}
						lv_superTypeParams_14_0=ruleTypeParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompositionRule());
							}
							add(
								$current,
								"superTypeParams",
								lv_superTypeParams_14_0,
								"de.ubt.ai1.mule.MuLE.TypeParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_15=','
					{
						newLeafNode(otherlv_15, grammarAccess.getCompositionAccess().getCommaKeyword_7_2_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0());
							}
							lv_superTypeParams_16_0=ruleTypeParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCompositionRule());
								}
								add(
									$current,
									"superTypeParams",
									lv_superTypeParams_16_0,
									"de.ubt.ai1.mule.MuLE.TypeParameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_17='>'
				{
					newLeafNode(otherlv_17, grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_7_2_3());
				}
			)?
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_8_0());
				}
				lv_typeDeclarations_18_0=ruleTypeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					add(
						$current,
						"typeDeclarations",
						lv_typeDeclarations_18_0,
						"de.ubt.ai1.mule.MuLE.TypeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getAttributesAttributeParserRuleCall_9_0());
				}
				lv_attributes_19_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_19_0,
						"de.ubt.ai1.mule.MuLE.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getOperationsOperationParserRuleCall_10_0());
				}
				lv_operations_20_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					add(
						$current,
						"operations",
						lv_operations_20_0,
						"de.ubt.ai1.mule.MuLE.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_21='endtype'
		{
			newLeafNode(otherlv_21, grammarAccess.getCompositionAccess().getEndtypeKeyword_11());
		}
	)
;

// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); }
	iv_ruleTypeParameter=ruleTypeParameter
	{ $current=$iv_ruleTypeParameter.current; }
	EOF;

// Rule TypeParameter
ruleTypeParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		(
			otherlv_1='extends'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeParameterAccess().getExtendsKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeParameterRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTypeParameterAccess().getSuperTypeCompositionCrossReference_1_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0());
		}
		this_Attribute_0=ruleAttribute
		{
			$current = $this_Attribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getVariableDeclarationParserRuleCall_1());
		}
		this_VariableDeclaration_1=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getParameterParserRuleCall_2());
		}
		this_Parameter_2=ruleParameter
		{
			$current = $this_Parameter_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getOperationParserRuleCall_3());
		}
		this_Operation_3=ruleOperation
		{
			$current = $this_Operation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getVisibilityVisibilityModifierParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibilityModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"de.ubt.ai1.mule.MuLE.VisibilityModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='attribute'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getAttributeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeDataTypeParserRuleCall_4_0());
				}
				lv_type_4_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"de.ubt.ai1.mule.MuLE.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parameter'
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParameterKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeDataTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.ubt.ai1.mule.MuLE.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_override_0_0='override'
				{
					newLeafNode(lv_override_0_0, grammarAccess.getOperationAccess().getOverrideOverrideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed($current, "override", true, "override");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getVisibilityVisibilityModifierParserRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibilityModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"de.ubt.ai1.mule.MuLE.VisibilityModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_abstract_2_0='abstract'
				{
					newLeafNode(lv_abstract_2_0, grammarAccess.getOperationAccess().getAbstractAbstractKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed($current, "abstract", true, "abstract");
				}
			)
		)?
		otherlv_3='operation'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getOperationKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_0_0());
					}
					lv_params_6_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						add(
							$current,
							"params",
							lv_params_6_0,
							"de.ubt.ai1.mule.MuLE.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getOperationAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_1_1_0());
						}
						lv_params_8_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationRule());
							}
							add(
								$current,
								"params",
								lv_params_8_0,
								"de.ubt.ai1.mule.MuLE.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getOperationAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getOperationAccess().getColonKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getTypeDataTypeParserRuleCall_8_1_0());
					}
					lv_type_11_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"type",
							lv_type_11_0,
							"de.ubt.ai1.mule.MuLE.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getBlockBlockParserRuleCall_9_0_0());
					}
					lv_block_12_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"block",
							lv_block_12_0,
							"de.ubt.ai1.mule.MuLE.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13='endoperation'
			{
				newLeafNode(otherlv_13, grammarAccess.getOperationAccess().getEndoperationKeyword_9_1());
			}
		)?
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"de.ubt.ai1.mule.MuLE.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignmentOrOperationCallParserRuleCall_1());
		}
		this_AssignmentOrOperationCall_1=ruleAssignmentOrOperationCall
		{
			$current = $this_AssignmentOrOperationCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2());
		}
		this_IfStatement_2=ruleIfStatement
		{
			$current = $this_IfStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_3());
		}
		this_LoopStatement_3=ruleLoopStatement
		{
			$current = $this_LoopStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLetStatementParserRuleCall_4());
		}
		this_LetStatement_4=ruleLetStatement
		{
			$current = $this_LetStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_5());
		}
		this_ReturnStatement_5=ruleReturnStatement
		{
			$current = $this_ReturnStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_6());
		}
		this_ExitStatement_6=ruleExitStatement
		{
			$current = $this_ExitStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
		}
		(
			((
				ruleExpression
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleExitStatement
entryRuleExitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExitStatementRule()); }
	iv_ruleExitStatement=ruleExitStatement
	{ $current=$iv_ruleExitStatement.current; }
	EOF;

// Rule ExitStatement
ruleExitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExitStatementAccess().getExitStatementAction_0(),
					$current);
			}
		)
		otherlv_1='exit'
		{
			newLeafNode(otherlv_1, grammarAccess.getExitStatementAccess().getExitKeyword_1());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVariableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.ubt.ai1.mule.MuLE.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeDataTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.ubt.ai1.mule.MuLE.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignmentOrOperationCall
entryRuleAssignmentOrOperationCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentOrOperationCallRule()); }
	iv_ruleAssignmentOrOperationCall=ruleAssignmentOrOperationCall
	{ $current=$iv_ruleAssignmentOrOperationCall.current; }
	EOF;

// Rule AssignmentOrOperationCall
ruleAssignmentOrOperationCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAssignmentOrOperationCallAccess().getSymbolReferenceParserRuleCall_0_0());
			}
			this_SymbolReference_0=ruleSymbolReference
			{
				$current = $this_SymbolReference_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getAssignmentOrOperationCallAccess().getSuperExpressionParserRuleCall_0_1());
			}
			this_SuperExpression_1=ruleSuperExpression
			{
				$current = $this_SuperExpression_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssignmentOrOperationCallAccess().getAssignmentOrOperationCallLeftAction_1_0(),
						$current);
				}
			)
			otherlv_3=':='
			{
				newLeafNode(otherlv_3, grammarAccess.getAssignmentOrOperationCallAccess().getColonEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentOrOperationCallAccess().getRightExpressionParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentOrOperationCallRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"de.ubt.ai1.mule.MuLE.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	iv_ruleLoopStatement=ruleLoopStatement
	{ $current=$iv_ruleLoopStatement.current; }
	EOF;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLoopStatementAccess().getLoopStatementAction_0(),
					$current);
			}
		)
		otherlv_1='loop'
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopStatementAccess().getLoopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopStatementAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='endloop'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopStatementAccess().getEndloopKeyword_3());
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfsElseIfParserRuleCall_4_0());
				}
				lv_elseIfs_4_0=ruleElseIf
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"elseIfs",
						lv_elseIfs_4_0,
						"de.ubt.ai1.mule.MuLE.ElseIf");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_5_1_0());
					}
					lv_elseBlock_6_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_6_0,
							"de.ubt.ai1.mule.MuLE.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='endif'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getEndifKeyword_6());
		}
	)
;

// Entry rule entryRuleElseIf
entryRuleElseIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfRule()); }
	iv_ruleElseIf=ruleElseIf
	{ $current=$iv_ruleElseIf.current; }
	EOF;

// Rule ElseIf
ruleElseIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elseif'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseIfAccess().getElseifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLetStatement
entryRuleLetStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetStatementRule()); }
	iv_ruleLetStatement=ruleLetStatement
	{ $current=$iv_ruleLetStatement.current; }
	EOF;

// Rule LetStatement
ruleLetStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getLetStatementAccess().getLetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetStatementAccess().getVariableVariableDeclarationParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"de.ubt.ai1.mule.MuLE.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='be'
		{
			newLeafNode(otherlv_2, grammarAccess.getLetStatementAccess().getBeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetStatementAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getLetStatementAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetStatementAccess().getBlockBlockParserRuleCall_5_0());
				}
				lv_block_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_5_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLetStatementAccess().getElseLetsElseLetParserRuleCall_6_0());
				}
				lv_elseLets_6_0=ruleElseLet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetStatementRule());
					}
					add(
						$current,
						"elseLets",
						lv_elseLets_6_0,
						"de.ubt.ai1.mule.MuLE.ElseLet");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				('else')=>
				otherlv_7='else'
				{
					newLeafNode(otherlv_7, grammarAccess.getLetStatementAccess().getElseKeyword_7_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLetStatementAccess().getElseBlockBlockParserRuleCall_7_1_0());
					}
					lv_elseBlock_8_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetStatementRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_8_0,
							"de.ubt.ai1.mule.MuLE.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='endlet'
		{
			newLeafNode(otherlv_9, grammarAccess.getLetStatementAccess().getEndletKeyword_8());
		}
	)
;

// Entry rule entryRuleElseLet
entryRuleElseLet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseLetRule()); }
	iv_ruleElseLet=ruleElseLet
	{ $current=$iv_ruleElseLet.current; }
	EOF;

// Rule ElseLet
ruleElseLet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elselet'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseLetAccess().getElseletKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseLetAccess().getVariableVariableDeclarationParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseLetRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"de.ubt.ai1.mule.MuLE.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='be'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseLetAccess().getBeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseLetAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseLetRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getElseLetAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseLetAccess().getBlockBlockParserRuleCall_5_0());
				}
				lv_block_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseLetRule());
					}
					set(
						$current,
						"block",
						lv_block_5_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='or'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "or");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0());
		}
		this_EqualityExpression_0=ruleEqualityExpression
		{
			$current = $this_EqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='and'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "and");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityExpressionAccess().getOpSolidusEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='<'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonExpressionAccess().getOpLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='>='
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='+'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='-'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='&'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getAdditiveExpressionAccess().getOpAmpersandKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExponentExpressionParserRuleCall_0());
		}
		this_ExponentExpression_0=ruleExponentExpression
		{
			$current = $this_ExponentExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='div'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getMultiplicativeExpressionAccess().getOpDivKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='mod'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getMultiplicativeExpressionAccess().getOpModKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightExponentExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.ExponentExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExponentExpression
entryRuleExponentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentExpressionRule()); }
	iv_ruleExponentExpression=ruleExponentExpression
	{ $current=$iv_ruleExponentExpression.current; }
	EOF;

// Rule ExponentExpression
ruleExponentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentExpressionAccess().getAtomicExpressionParserRuleCall_0());
		}
		this_AtomicExpression_0=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentExpressionAccess().getExponentExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='exp'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getExponentExpressionAccess().getOpExpKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExponentExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "exp");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentExpressionAccess().getRightAtomicExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAtomicExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.ubt.ai1.mule.MuLE.AtomicExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getSymbolReferenceParserRuleCall_0());
		}
		this_SymbolReference_0=ruleSymbolReference
		{
			$current = $this_SymbolReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getSuperExpressionParserRuleCall_1());
		}
		this_SuperExpression_1=ruleSuperExpression
		{
			$current = $this_SuperExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getStringConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"de.ubt.ai1.mule.MuLE.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getIntegerConstantAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_INTEGER
					{
						newLeafNode(lv_value_5_0, grammarAccess.getAtomicExpressionAccess().getValueINTEGERTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"de.ubt.ai1.mule.MuLE.INTEGER");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getRationalConstantAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_RATIONAL
					{
						newLeafNode(lv_value_7_0, grammarAccess.getAtomicExpressionAccess().getValueRATIONALTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"de.ubt.ai1.mule.MuLE.RATIONAL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getBooleanConstantAction_5_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_9_1='true'
						{
							newLeafNode(lv_value_9_1, grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_5_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_9_1, null);
						}
						    |
						lv_value_9_2='false'
						{
							newLeafNode(lv_value_9_2, grammarAccess.getAtomicExpressionAccess().getValueFalseKeyword_5_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_9_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getNullAction_6_0(),
						$current);
				}
			)
			otherlv_11='null'
			{
				newLeafNode(otherlv_11, grammarAccess.getAtomicExpressionAccess().getNullKeyword_6_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getUnaryAction_7_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_13_1='+'
						{
							newLeafNode(lv_op_13_1, grammarAccess.getAtomicExpressionAccess().getOpPlusSignKeyword_7_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_13_1, null);
						}
						    |
						lv_op_13_2='-'
						{
							newLeafNode(lv_op_13_2, grammarAccess.getAtomicExpressionAccess().getOpHyphenMinusKeyword_7_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_13_2, null);
						}
						    |
						lv_op_13_3='not'
						{
							newLeafNode(lv_op_13_3, grammarAccess.getAtomicExpressionAccess().getOpNotKeyword_7_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_13_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_7_2_0());
					}
					lv_expression_14_0=ruleAtomicExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_14_0,
							"de.ubt.ai1.mule.MuLE.AtomicExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getReferenceAction_8_0(),
						$current);
				}
			)
			otherlv_16='reference'
			{
				newLeafNode(otherlv_16, grammarAccess.getAtomicExpressionAccess().getReferenceKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_8_2_0());
					}
					lv_expression_17_0=ruleAtomicExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_17_0,
							"de.ubt.ai1.mule.MuLE.AtomicExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getParenthesizedExpressionAction_9_0(),
						$current);
				}
			)
			otherlv_19='('
			{
				newLeafNode(otherlv_19, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getExpressionExpressionParserRuleCall_9_2_0());
					}
					lv_expression_20_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_20_0,
							"de.ubt.ai1.mule.MuLE.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_21=')'
			{
				newLeafNode(otherlv_21, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_9_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getListInitParserRuleCall_10());
		}
		this_ListInit_22=ruleListInit
		{
			$current = $this_ListInit_22.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getLambdaExpressionParserRuleCall_11());
		}
		this_LambdaExpression_23=ruleLambdaExpression
		{
			$current = $this_LambdaExpression_23.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLambdaExpression
entryRuleLambdaExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaExpressionRule()); }
	iv_ruleLambdaExpression=ruleLambdaExpression
	{ $current=$iv_ruleLambdaExpression.current; }
	EOF;

// Rule LambdaExpression
ruleLambdaExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLambdaExpressionAccess().getLambdaExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='operation'
		{
			newLeafNode(otherlv_1, grammarAccess.getLambdaExpressionAccess().getOperationKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"de.ubt.ai1.mule.MuLE.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getLambdaExpressionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"de.ubt.ai1.mule.MuLE.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getLambdaExpressionAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLambdaExpressionAccess().getTypeDataTypeParserRuleCall_5_1_0());
					}
					lv_type_8_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_8_0,
							"de.ubt.ai1.mule.MuLE.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaExpressionAccess().getBlockBlockParserRuleCall_6_0());
				}
				lv_block_9_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
					}
					set(
						$current,
						"block",
						lv_block_9_0,
						"de.ubt.ai1.mule.MuLE.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='endoperation'
		{
			newLeafNode(otherlv_10, grammarAccess.getLambdaExpressionAccess().getEndoperationKeyword_7());
		}
	)
;

// Entry rule entryRuleSuperExpression
entryRuleSuperExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuperExpressionRule()); }
	iv_ruleSuperExpression=ruleSuperExpression
	{ $current=$iv_ruleSuperExpression.current; }
	EOF;

// Rule SuperExpression
ruleSuperExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSuperExpressionAccess().getSuperExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='super'
		{
			newLeafNode(otherlv_1, grammarAccess.getSuperExpressionAccess().getSuperKeyword_1());
		}
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getSuperExpressionAccess().getFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSuperExpressionAccess().getMemberCallSymbolReferenceParserRuleCall_3_0());
				}
				lv_memberCall_3_0=ruleSymbolReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuperExpressionRule());
					}
					set(
						$current,
						"memberCall",
						lv_memberCall_3_0,
						"de.ubt.ai1.mule.MuLE.SymbolReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSymbolReference
entryRuleSymbolReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolReferenceRule()); }
	iv_ruleSymbolReference=ruleSymbolReference
	{ $current=$iv_ruleSymbolReference.current; }
	EOF;

// Rule SymbolReference
ruleSymbolReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSymbolReferenceAccess().getSymbolNamedElementCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSymbolReferenceAccess().getCompositionInitSymbolRefCompositionInitParserRuleCall_1_0());
				}
				lv_compositionInit_1_0=ruleSymbolRefCompositionInit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSymbolReferenceRule());
					}
					set(
						$current,
						"compositionInit",
						lv_compositionInit_1_0,
						"de.ubt.ai1.mule.MuLE.SymbolRefCompositionInit");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSymbolReferenceAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_0());
				}
				lv_accessModifier_2_0=ruleSymbolRefAccessModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSymbolReferenceRule());
					}
					set(
						$current,
						"accessModifier",
						lv_accessModifier_2_0,
						"de.ubt.ai1.mule.MuLE.SymbolRefAccessModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getSymbolReferenceAccess().getFullStopKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolReferenceAccess().getMemberCallSymbolReferenceParserRuleCall_3_1_0());
					}
					lv_memberCall_4_0=ruleSymbolReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolReferenceRule());
						}
						set(
							$current,
							"memberCall",
							lv_memberCall_4_0,
							"de.ubt.ai1.mule.MuLE.SymbolReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSymbolRefAccessModifier
entryRuleSymbolRefAccessModifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRefAccessModifierRule()); }
	iv_ruleSymbolRefAccessModifier=ruleSymbolRefAccessModifier
	{ $current=$iv_ruleSymbolRefAccessModifier.current; }
	EOF;

// Rule SymbolRefAccessModifier
ruleSymbolRefAccessModifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSymbolRefAccessModifierAccess().getOperationInvocationAction_0_0(),
						$current);
				}
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSymbolRefAccessModifierAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_0_0());
						}
						lv_params_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
							}
							add(
								$current,
								"params",
								lv_params_2_0,
								"de.ubt.ai1.mule.MuLE.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getSymbolRefAccessModifierAccess().getCommaKeyword_0_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_1_1_0());
							}
							lv_params_4_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
								}
								add(
									$current,
									"params",
									lv_params_4_0,
									"de.ubt.ai1.mule.MuLE.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSymbolRefAccessModifierAccess().getRightParenthesisKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0());
					}
					lv_accessModifier_6_0=ruleSymbolRefAccessModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
						}
						set(
							$current,
							"accessModifier",
							lv_accessModifier_6_0,
							"de.ubt.ai1.mule.MuLE.SymbolRefAccessModifier");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSymbolRefAccessModifierAccess().getListAccessAction_1_0(),
						$current);
				}
			)
			otherlv_8='['
			{
				newLeafNode(otherlv_8, grammarAccess.getSymbolRefAccessModifierAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getIndexExpressionParserRuleCall_1_2_0());
					}
					lv_index_9_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
						}
						set(
							$current,
							"index",
							lv_index_9_0,
							"de.ubt.ai1.mule.MuLE.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=']'
			{
				newLeafNode(otherlv_10, grammarAccess.getSymbolRefAccessModifierAccess().getRightSquareBracketKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0());
					}
					lv_accessModifier_11_0=ruleSymbolRefAccessModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
						}
						set(
							$current,
							"accessModifier",
							lv_accessModifier_11_0,
							"de.ubt.ai1.mule.MuLE.SymbolRefAccessModifier");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSymbolRefAccessModifierAccess().getDereferenceAction_2_0(),
						$current);
				}
			)
			otherlv_13='@'
			{
				newLeafNode(otherlv_13, grammarAccess.getSymbolRefAccessModifierAccess().getCommercialAtKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0());
					}
					lv_accessModifier_14_0=ruleSymbolRefAccessModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolRefAccessModifierRule());
						}
						set(
							$current,
							"accessModifier",
							lv_accessModifier_14_0,
							"de.ubt.ai1.mule.MuLE.SymbolRefAccessModifier");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleSymbolRefCompositionInit
entryRuleSymbolRefCompositionInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRefCompositionInitRule()); }
	iv_ruleSymbolRefCompositionInit=ruleSymbolRefCompositionInit
	{ $current=$iv_ruleSymbolRefCompositionInit.current; }
	EOF;

// Rule SymbolRefCompositionInit
ruleSymbolRefCompositionInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSymbolRefCompositionInitAccess().getSymbolRefCompositionInitAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSymbolRefCompositionInitAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0());
					}
					lv_attributes_2_0=ruleSymbolRefCompositionAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSymbolRefCompositionInitRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_2_0,
							"de.ubt.ai1.mule.MuLE.SymbolRefCompositionAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSymbolRefCompositionInitAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0());
						}
						lv_attributes_4_0=ruleSymbolRefCompositionAttribute
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSymbolRefCompositionInitRule());
							}
							add(
								$current,
								"attributes",
								lv_attributes_4_0,
								"de.ubt.ai1.mule.MuLE.SymbolRefCompositionAttribute");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSymbolRefCompositionInitAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSymbolRefCompositionAttribute
entryRuleSymbolRefCompositionAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRefCompositionAttributeRule()); }
	iv_ruleSymbolRefCompositionAttribute=ruleSymbolRefCompositionAttribute
	{ $current=$iv_ruleSymbolRefCompositionAttribute.current; }
	EOF;

// Rule SymbolRefCompositionAttribute
ruleSymbolRefCompositionAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRefCompositionAttributeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAttributeCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSymbolRefCompositionAttributeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSymbolRefCompositionAttributeAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSymbolRefCompositionAttributeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleListInit
entryRuleListInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListInitRule()); }
	iv_ruleListInit=ruleListInit
	{ $current=$iv_ruleListInit.current; }
	EOF;

// Rule ListInit
ruleListInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListInitAccess().getListInitAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getListInitAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getListInitAccess().getLeftExpressionParserRuleCall_2_0_0());
					}
					lv_left_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListInitRule());
						}
						set(
							$current,
							"left",
							lv_left_2_0,
							"de.ubt.ai1.mule.MuLE.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getListInitAccess().getRightListInitFunctionParserRuleCall_2_1_0_0());
						}
						lv_right_3_1=ruleListInitFunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getListInitRule());
							}
							set(
								$current,
								"right",
								lv_right_3_1,
								"de.ubt.ai1.mule.MuLE.ListInitFunction");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getListInitAccess().getRightListInitElementsParserRuleCall_2_1_0_1());
						}
						lv_right_3_2=ruleListInitElements
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getListInitRule());
							}
							set(
								$current,
								"right",
								lv_right_3_2,
								"de.ubt.ai1.mule.MuLE.ListInitElements");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getListInitAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleListInitFunction
entryRuleListInitFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListInitFunctionRule()); }
	iv_ruleListInitFunction=ruleListInitFunction
	{ $current=$iv_ruleListInitFunction.current; }
	EOF;

// Rule ListInitFunction
ruleListInitFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListInitFunctionAccess().getListInitFunctionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_op_1_1='**'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getListInitFunctionAccess().getOpAsteriskAsteriskKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getListInitFunctionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='..'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getListInitFunctionAccess().getOpFullStopFullStopKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getListInitFunctionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getListInitFunctionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListInitFunctionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"de.ubt.ai1.mule.MuLE.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleListInitElements
entryRuleListInitElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListInitElementsRule()); }
	iv_ruleListInitElements=ruleListInitElements
	{ $current=$iv_ruleListInitElements.current; }
	EOF;

// Rule ListInitElements
ruleListInitElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListInitElementsAccess().getListInitElementsAction_0(),
					$current);
			}
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getListInitElementsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListInitElementsAccess().getElementsExpressionParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListInitElementsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"de.ubt.ai1.mule.MuLE.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_INTEGER : RULE_INT;

RULE_RATIONAL : RULE_INT '.' RULE_INT ('E' ('+'|'-')? RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
