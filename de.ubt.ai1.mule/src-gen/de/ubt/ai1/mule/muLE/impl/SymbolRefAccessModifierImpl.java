/**
 * generated by Xtext 2.19.0
 */
package de.ubt.ai1.mule.muLE.impl;

import de.ubt.ai1.mule.muLE.MuLEPackage;
import de.ubt.ai1.mule.muLE.SymbolRefAccessModifier;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Symbol Ref Access Modifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.ubt.ai1.mule.muLE.impl.SymbolRefAccessModifierImpl#getAccessModifier <em>Access Modifier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SymbolRefAccessModifierImpl extends MinimalEObjectImpl.Container implements SymbolRefAccessModifier
{
  /**
   * The cached value of the '{@link #getAccessModifier() <em>Access Modifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessModifier()
   * @generated
   * @ordered
   */
  protected SymbolRefAccessModifier accessModifier;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SymbolRefAccessModifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MuLEPackage.Literals.SYMBOL_REF_ACCESS_MODIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolRefAccessModifier getAccessModifier()
  {
    return accessModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAccessModifier(SymbolRefAccessModifier newAccessModifier, NotificationChain msgs)
  {
    SymbolRefAccessModifier oldAccessModifier = accessModifier;
    accessModifier = newAccessModifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER, oldAccessModifier, newAccessModifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAccessModifier(SymbolRefAccessModifier newAccessModifier)
  {
    if (newAccessModifier != accessModifier)
    {
      NotificationChain msgs = null;
      if (accessModifier != null)
        msgs = ((InternalEObject)accessModifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER, null, msgs);
      if (newAccessModifier != null)
        msgs = ((InternalEObject)newAccessModifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER, null, msgs);
      msgs = basicSetAccessModifier(newAccessModifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER, newAccessModifier, newAccessModifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER:
        return basicSetAccessModifier(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER:
        return getAccessModifier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER:
        setAccessModifier((SymbolRefAccessModifier)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER:
        setAccessModifier((SymbolRefAccessModifier)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER__ACCESS_MODIFIER:
        return accessModifier != null;
    }
    return super.eIsSet(featureID);
  }

} //SymbolRefAccessModifierImpl
