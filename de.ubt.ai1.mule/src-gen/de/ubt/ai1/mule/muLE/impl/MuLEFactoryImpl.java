/**
 * generated by Xtext 2.19.0
 */
package de.ubt.ai1.mule.muLE.impl;

import de.ubt.ai1.mule.muLE.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MuLEFactoryImpl extends EFactoryImpl implements MuLEFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MuLEFactory init()
  {
    try
    {
      MuLEFactory theMuLEFactory = (MuLEFactory)EPackage.Registry.INSTANCE.getEFactory(MuLEPackage.eNS_URI);
      if (theMuLEFactory != null)
      {
        return theMuLEFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MuLEFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MuLEFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MuLEPackage.COMPILATION_UNIT: return createCompilationUnit();
      case MuLEPackage.IMPORT: return createImport();
      case MuLEPackage.MAIN_PROCEDURE: return createMainProcedure();
      case MuLEPackage.PROGRAM_ELEMENT: return createProgramElement();
      case MuLEPackage.NAMED_ELEMENT: return createNamedElement();
      case MuLEPackage.DATA_TYPE: return createDataType();
      case MuLEPackage.DECLARED_TYPE: return createDeclaredType();
      case MuLEPackage.BASIC_TYPE: return createBasicType();
      case MuLEPackage.REFERENCE_TYPE: return createReferenceType();
      case MuLEPackage.LIST_TYPE: return createListType();
      case MuLEPackage.OPERATION_TYPE: return createOperationType();
      case MuLEPackage.TYPE_DECLARATION: return createTypeDeclaration();
      case MuLEPackage.ENUMERATION: return createEnumeration();
      case MuLEPackage.ENUMERATION_VALUE: return createEnumerationValue();
      case MuLEPackage.COMPOSITION: return createComposition();
      case MuLEPackage.TYPE_PARAMETER: return createTypeParameter();
      case MuLEPackage.FEATURE: return createFeature();
      case MuLEPackage.ATTRIBUTE: return createAttribute();
      case MuLEPackage.PARAMETER: return createParameter();
      case MuLEPackage.OPERATION: return createOperation();
      case MuLEPackage.BLOCK: return createBlock();
      case MuLEPackage.STATEMENT: return createStatement();
      case MuLEPackage.RETURN_STATEMENT: return createReturnStatement();
      case MuLEPackage.EXIT_STATEMENT: return createExitStatement();
      case MuLEPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case MuLEPackage.ASSIGNMENT_OR_OPERATION_CALL: return createAssignmentOrOperationCall();
      case MuLEPackage.LOOP_STATEMENT: return createLoopStatement();
      case MuLEPackage.IF_STATEMENT: return createIfStatement();
      case MuLEPackage.ELSE_IF: return createElseIf();
      case MuLEPackage.LET_STATEMENT: return createLetStatement();
      case MuLEPackage.ELSE_LET: return createElseLet();
      case MuLEPackage.EXPRESSION: return createExpression();
      case MuLEPackage.SUPER_EXPRESSION: return createSuperExpression();
      case MuLEPackage.SYMBOL_REFERENCE: return createSymbolReference();
      case MuLEPackage.SYMBOL_REF_ACCESS_MODIFIER: return createSymbolRefAccessModifier();
      case MuLEPackage.SYMBOL_REF_COMPOSITION_INIT: return createSymbolRefCompositionInit();
      case MuLEPackage.SYMBOL_REF_COMPOSITION_ATTRIBUTE: return createSymbolRefCompositionAttribute();
      case MuLEPackage.LIST_INIT: return createListInit();
      case MuLEPackage.LIST_INIT_FUNCTION: return createListInitFunction();
      case MuLEPackage.LIST_INIT_ELEMENTS: return createListInitElements();
      case MuLEPackage.OR_EXPRESSION: return createOrExpression();
      case MuLEPackage.AND_EXPRESSION: return createAndExpression();
      case MuLEPackage.EQUALITY_EXPRESSION: return createEqualityExpression();
      case MuLEPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case MuLEPackage.ADDITIVE_EXPRESSION: return createAdditiveExpression();
      case MuLEPackage.MULTIPLICATIVE_EXPRESSION: return createMultiplicativeExpression();
      case MuLEPackage.EXPONENT_EXPRESSION: return createExponentExpression();
      case MuLEPackage.STRING_CONSTANT: return createStringConstant();
      case MuLEPackage.INTEGER_CONSTANT: return createIntegerConstant();
      case MuLEPackage.RATIONAL_CONSTANT: return createRationalConstant();
      case MuLEPackage.BOOLEAN_CONSTANT: return createBooleanConstant();
      case MuLEPackage.NULL: return createNull();
      case MuLEPackage.UNARY: return createUnary();
      case MuLEPackage.REFERENCE: return createReference();
      case MuLEPackage.PARENTHESIZED_EXPRESSION: return createParenthesizedExpression();
      case MuLEPackage.LAMBDA_EXPRESSION: return createLambdaExpression();
      case MuLEPackage.OPERATION_INVOCATION: return createOperationInvocation();
      case MuLEPackage.LIST_ACCESS: return createListAccess();
      case MuLEPackage.DEREFERENCE: return createDereference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompilationUnit createCompilationUnit()
  {
    CompilationUnitImpl compilationUnit = new CompilationUnitImpl();
    return compilationUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainProcedure createMainProcedure()
  {
    MainProcedureImpl mainProcedure = new MainProcedureImpl();
    return mainProcedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgramElement createProgramElement()
  {
    ProgramElementImpl programElement = new ProgramElementImpl();
    return programElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedElement createNamedElement()
  {
    NamedElementImpl namedElement = new NamedElementImpl();
    return namedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclaredType createDeclaredType()
  {
    DeclaredTypeImpl declaredType = new DeclaredTypeImpl();
    return declaredType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicType createBasicType()
  {
    BasicTypeImpl basicType = new BasicTypeImpl();
    return basicType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceType createReferenceType()
  {
    ReferenceTypeImpl referenceType = new ReferenceTypeImpl();
    return referenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListType createListType()
  {
    ListTypeImpl listType = new ListTypeImpl();
    return listType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationType createOperationType()
  {
    OperationTypeImpl operationType = new OperationTypeImpl();
    return operationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDeclaration createTypeDeclaration()
  {
    TypeDeclarationImpl typeDeclaration = new TypeDeclarationImpl();
    return typeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationValue createEnumerationValue()
  {
    EnumerationValueImpl enumerationValue = new EnumerationValueImpl();
    return enumerationValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeParameter createTypeParameter()
  {
    TypeParameterImpl typeParameter = new TypeParameterImpl();
    return typeParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExitStatement createExitStatement()
  {
    ExitStatementImpl exitStatement = new ExitStatementImpl();
    return exitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignmentOrOperationCall createAssignmentOrOperationCall()
  {
    AssignmentOrOperationCallImpl assignmentOrOperationCall = new AssignmentOrOperationCallImpl();
    return assignmentOrOperationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseIf createElseIf()
  {
    ElseIfImpl elseIf = new ElseIfImpl();
    return elseIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetStatement createLetStatement()
  {
    LetStatementImpl letStatement = new LetStatementImpl();
    return letStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseLet createElseLet()
  {
    ElseLetImpl elseLet = new ElseLetImpl();
    return elseLet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperExpression createSuperExpression()
  {
    SuperExpressionImpl superExpression = new SuperExpressionImpl();
    return superExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolReference createSymbolReference()
  {
    SymbolReferenceImpl symbolReference = new SymbolReferenceImpl();
    return symbolReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolRefAccessModifier createSymbolRefAccessModifier()
  {
    SymbolRefAccessModifierImpl symbolRefAccessModifier = new SymbolRefAccessModifierImpl();
    return symbolRefAccessModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolRefCompositionInit createSymbolRefCompositionInit()
  {
    SymbolRefCompositionInitImpl symbolRefCompositionInit = new SymbolRefCompositionInitImpl();
    return symbolRefCompositionInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolRefCompositionAttribute createSymbolRefCompositionAttribute()
  {
    SymbolRefCompositionAttributeImpl symbolRefCompositionAttribute = new SymbolRefCompositionAttributeImpl();
    return symbolRefCompositionAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListInit createListInit()
  {
    ListInitImpl listInit = new ListInitImpl();
    return listInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListInitFunction createListInitFunction()
  {
    ListInitFunctionImpl listInitFunction = new ListInitFunctionImpl();
    return listInitFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListInitElements createListInitElements()
  {
    ListInitElementsImpl listInitElements = new ListInitElementsImpl();
    return listInitElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpression createEqualityExpression()
  {
    EqualityExpressionImpl equalityExpression = new EqualityExpressionImpl();
    return equalityExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditiveExpression createAdditiveExpression()
  {
    AdditiveExpressionImpl additiveExpression = new AdditiveExpressionImpl();
    return additiveExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicativeExpression createMultiplicativeExpression()
  {
    MultiplicativeExpressionImpl multiplicativeExpression = new MultiplicativeExpressionImpl();
    return multiplicativeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExponentExpression createExponentExpression()
  {
    ExponentExpressionImpl exponentExpression = new ExponentExpressionImpl();
    return exponentExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerConstant createIntegerConstant()
  {
    IntegerConstantImpl integerConstant = new IntegerConstantImpl();
    return integerConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RationalConstant createRationalConstant()
  {
    RationalConstantImpl rationalConstant = new RationalConstantImpl();
    return rationalConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanConstant createBooleanConstant()
  {
    BooleanConstantImpl booleanConstant = new BooleanConstantImpl();
    return booleanConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Null createNull()
  {
    NullImpl null_ = new NullImpl();
    return null_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unary createUnary()
  {
    UnaryImpl unary = new UnaryImpl();
    return unary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParenthesizedExpression createParenthesizedExpression()
  {
    ParenthesizedExpressionImpl parenthesizedExpression = new ParenthesizedExpressionImpl();
    return parenthesizedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LambdaExpression createLambdaExpression()
  {
    LambdaExpressionImpl lambdaExpression = new LambdaExpressionImpl();
    return lambdaExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationInvocation createOperationInvocation()
  {
    OperationInvocationImpl operationInvocation = new OperationInvocationImpl();
    return operationInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListAccess createListAccess()
  {
    ListAccessImpl listAccess = new ListAccessImpl();
    return listAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dereference createDereference()
  {
    DereferenceImpl dereference = new DereferenceImpl();
    return dereference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MuLEPackage getMuLEPackage()
  {
    return (MuLEPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MuLEPackage getPackage()
  {
    return MuLEPackage.eINSTANCE;
  }

} //MuLEFactoryImpl
