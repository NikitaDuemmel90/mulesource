/*
 * generated by Xtext 2.19.0
 */
grammar InternalMuLE;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package de.ubt.ai1.mule.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.ubt.ai1.mule.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.ubt.ai1.mule.services.MuLEGrammarAccess;

}
@parser::members {
	private MuLEGrammarAccess grammarAccess;

	public void setGrammarAccess(MuLEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit
:
{ before(grammarAccess.getCompilationUnitRule()); }
	 ruleCompilationUnit
{ after(grammarAccess.getCompilationUnitRule()); } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getGroup()); }
		(rule__CompilationUnit__Group__0)
		{ after(grammarAccess.getCompilationUnitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainProcedure
entryRuleMainProcedure
:
{ before(grammarAccess.getMainProcedureRule()); }
	 ruleMainProcedure
{ after(grammarAccess.getMainProcedureRule()); } 
	 EOF 
;

// Rule MainProcedure
ruleMainProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainProcedureAccess().getGroup()); }
		(rule__MainProcedure__Group__0)
		{ after(grammarAccess.getMainProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgramElement
entryRuleProgramElement
:
{ before(grammarAccess.getProgramElementRule()); }
	 ruleProgramElement
{ after(grammarAccess.getProgramElementRule()); } 
	 EOF 
;

// Rule ProgramElement
ruleProgramElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramElementAccess().getAlternatives()); }
		(rule__ProgramElement__Alternatives)
		{ after(grammarAccess.getProgramElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredType
entryRuleDeclaredType
:
{ before(grammarAccess.getDeclaredTypeRule()); }
	 ruleDeclaredType
{ after(grammarAccess.getDeclaredTypeRule()); } 
	 EOF 
;

// Rule DeclaredType
ruleDeclaredType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getGroup()); }
		(rule__DeclaredType__Group__0)
		{ after(grammarAccess.getDeclaredTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicType
entryRuleBasicType
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameAssignment()); }
		(rule__BasicType__TypeNameAssignment)
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReferenceType
entryRuleReferenceType
:
{ before(grammarAccess.getReferenceTypeRule()); }
	 ruleReferenceType
{ after(grammarAccess.getReferenceTypeRule()); } 
	 EOF 
;

// Rule ReferenceType
ruleReferenceType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceTypeAccess().getGroup()); }
		(rule__ReferenceType__Group__0)
		{ after(grammarAccess.getReferenceTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListType
entryRuleListType
:
{ before(grammarAccess.getListTypeRule()); }
	 ruleListType
{ after(grammarAccess.getListTypeRule()); } 
	 EOF 
;

// Rule ListType
ruleListType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListTypeAccess().getGroup()); }
		(rule__ListType__Group__0)
		{ after(grammarAccess.getListTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationType
entryRuleOperationType
:
{ before(grammarAccess.getOperationTypeRule()); }
	 ruleOperationType
{ after(grammarAccess.getOperationTypeRule()); } 
	 EOF 
;

// Rule OperationType
ruleOperationType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationTypeAccess().getGroup()); }
		(rule__OperationType__Group__0)
		{ after(grammarAccess.getOperationTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVisibilityModifier
entryRuleVisibilityModifier
:
{ before(grammarAccess.getVisibilityModifierRule()); }
	 ruleVisibilityModifier
{ after(grammarAccess.getVisibilityModifierRule()); } 
	 EOF 
;

// Rule VisibilityModifier
ruleVisibilityModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVisibilityModifierAccess().getAlternatives()); }
		(rule__VisibilityModifier__Alternatives)
		{ after(grammarAccess.getVisibilityModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
		(rule__TypeDeclaration__Alternatives)
		{ after(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerationValue
entryRuleEnumerationValue
:
{ before(grammarAccess.getEnumerationValueRule()); }
	 ruleEnumerationValue
{ after(grammarAccess.getEnumerationValueRule()); } 
	 EOF 
;

// Rule EnumerationValue
ruleEnumerationValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationValueAccess().getNameAssignment()); }
		(rule__EnumerationValue__NameAssignment)
		{ after(grammarAccess.getEnumerationValueAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComposition
entryRuleComposition
:
{ before(grammarAccess.getCompositionRule()); }
	 ruleComposition
{ after(grammarAccess.getCompositionRule()); } 
	 EOF 
;

// Rule Composition
ruleComposition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositionAccess().getGroup()); }
		(rule__Composition__Group__0)
		{ after(grammarAccess.getCompositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeParameter
entryRuleTypeParameter
:
{ before(grammarAccess.getTypeParameterRule()); }
	 ruleTypeParameter
{ after(grammarAccess.getTypeParameterRule()); } 
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeParameterAccess().getGroup()); }
		(rule__TypeParameter__Group__0)
		{ after(grammarAccess.getTypeParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
		(rule__Feature__Alternatives)
		{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getGroup()); }
		(rule__Operation__Group__0)
		{ after(grammarAccess.getOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
		(rule__ReturnStatement__Group__0)
		{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExitStatement
entryRuleExitStatement
:
{ before(grammarAccess.getExitStatementRule()); }
	 ruleExitStatement
{ after(grammarAccess.getExitStatementRule()); } 
	 EOF 
;

// Rule ExitStatement
ruleExitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExitStatementAccess().getGroup()); }
		(rule__ExitStatement__Group__0)
		{ after(grammarAccess.getExitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentOrOperationCall
entryRuleAssignmentOrOperationCall
:
{ before(grammarAccess.getAssignmentOrOperationCallRule()); }
	 ruleAssignmentOrOperationCall
{ after(grammarAccess.getAssignmentOrOperationCallRule()); } 
	 EOF 
;

// Rule AssignmentOrOperationCall
ruleAssignmentOrOperationCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentOrOperationCallAccess().getGroup()); }
		(rule__AssignmentOrOperationCall__Group__0)
		{ after(grammarAccess.getAssignmentOrOperationCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
		(rule__LoopStatement__Group__0)
		{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseIf
entryRuleElseIf
:
{ before(grammarAccess.getElseIfRule()); }
	 ruleElseIf
{ after(grammarAccess.getElseIfRule()); } 
	 EOF 
;

// Rule ElseIf
ruleElseIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseIfAccess().getGroup()); }
		(rule__ElseIf__Group__0)
		{ after(grammarAccess.getElseIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetStatement
entryRuleLetStatement
:
{ before(grammarAccess.getLetStatementRule()); }
	 ruleLetStatement
{ after(grammarAccess.getLetStatementRule()); } 
	 EOF 
;

// Rule LetStatement
ruleLetStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetStatementAccess().getGroup()); }
		(rule__LetStatement__Group__0)
		{ after(grammarAccess.getLetStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseLet
entryRuleElseLet
:
{ before(grammarAccess.getElseLetRule()); }
	 ruleElseLet
{ after(grammarAccess.getElseLetRule()); } 
	 EOF 
;

// Rule ElseLet
ruleElseLet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseLetAccess().getGroup()); }
		(rule__ElseLet__Group__0)
		{ after(grammarAccess.getElseLetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
		(rule__EqualityExpression__Group__0)
		{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponentExpression
entryRuleExponentExpression
:
{ before(grammarAccess.getExponentExpressionRule()); }
	 ruleExponentExpression
{ after(grammarAccess.getExponentExpressionRule()); } 
	 EOF 
;

// Rule ExponentExpression
ruleExponentExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentExpressionAccess().getGroup()); }
		(rule__ExponentExpression__Group__0)
		{ after(grammarAccess.getExponentExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
		(rule__AtomicExpression__Alternatives)
		{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLambdaExpression
entryRuleLambdaExpression
:
{ before(grammarAccess.getLambdaExpressionRule()); }
	 ruleLambdaExpression
{ after(grammarAccess.getLambdaExpressionRule()); } 
	 EOF 
;

// Rule LambdaExpression
ruleLambdaExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getGroup()); }
		(rule__LambdaExpression__Group__0)
		{ after(grammarAccess.getLambdaExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuperExpression
entryRuleSuperExpression
:
{ before(grammarAccess.getSuperExpressionRule()); }
	 ruleSuperExpression
{ after(grammarAccess.getSuperExpressionRule()); } 
	 EOF 
;

// Rule SuperExpression
ruleSuperExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuperExpressionAccess().getGroup()); }
		(rule__SuperExpression__Group__0)
		{ after(grammarAccess.getSuperExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbolReference
entryRuleSymbolReference
:
{ before(grammarAccess.getSymbolReferenceRule()); }
	 ruleSymbolReference
{ after(grammarAccess.getSymbolReferenceRule()); } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolReferenceAccess().getGroup()); }
		(rule__SymbolReference__Group__0)
		{ after(grammarAccess.getSymbolReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbolRefAccessModifier
entryRuleSymbolRefAccessModifier
:
{ before(grammarAccess.getSymbolRefAccessModifierRule()); }
	 ruleSymbolRefAccessModifier
{ after(grammarAccess.getSymbolRefAccessModifierRule()); } 
	 EOF 
;

// Rule SymbolRefAccessModifier
ruleSymbolRefAccessModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAlternatives()); }
		(rule__SymbolRefAccessModifier__Alternatives)
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbolRefCompositionInit
entryRuleSymbolRefCompositionInit
:
{ before(grammarAccess.getSymbolRefCompositionInitRule()); }
	 ruleSymbolRefCompositionInit
{ after(grammarAccess.getSymbolRefCompositionInitRule()); } 
	 EOF 
;

// Rule SymbolRefCompositionInit
ruleSymbolRefCompositionInit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolRefCompositionInitAccess().getGroup()); }
		(rule__SymbolRefCompositionInit__Group__0)
		{ after(grammarAccess.getSymbolRefCompositionInitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymbolRefCompositionAttribute
entryRuleSymbolRefCompositionAttribute
:
{ before(grammarAccess.getSymbolRefCompositionAttributeRule()); }
	 ruleSymbolRefCompositionAttribute
{ after(grammarAccess.getSymbolRefCompositionAttributeRule()); } 
	 EOF 
;

// Rule SymbolRefCompositionAttribute
ruleSymbolRefCompositionAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getGroup()); }
		(rule__SymbolRefCompositionAttribute__Group__0)
		{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListInit
entryRuleListInit
:
{ before(grammarAccess.getListInitRule()); }
	 ruleListInit
{ after(grammarAccess.getListInitRule()); } 
	 EOF 
;

// Rule ListInit
ruleListInit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListInitAccess().getGroup()); }
		(rule__ListInit__Group__0)
		{ after(grammarAccess.getListInitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListInitFunction
entryRuleListInitFunction
:
{ before(grammarAccess.getListInitFunctionRule()); }
	 ruleListInitFunction
{ after(grammarAccess.getListInitFunctionRule()); } 
	 EOF 
;

// Rule ListInitFunction
ruleListInitFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListInitFunctionAccess().getGroup()); }
		(rule__ListInitFunction__Group__0)
		{ after(grammarAccess.getListInitFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListInitElements
entryRuleListInitElements
:
{ before(grammarAccess.getListInitElementsRule()); }
	 ruleListInitElements
{ after(grammarAccess.getListInitElementsRule()); } 
	 EOF 
;

// Rule ListInitElements
ruleListInitElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListInitElementsAccess().getGroup()); }
		(rule__ListInitElements__Group__0)
		{ after(grammarAccess.getListInitElementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getIsProgramAssignment_0_0()); }
		(rule__CompilationUnit__IsProgramAssignment_0_0)
		{ after(grammarAccess.getCompilationUnitAccess().getIsProgramAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompilationUnitAccess().getIsLibraryAssignment_0_1()); }
		(rule__CompilationUnit__IsLibraryAssignment_0_1)
		{ after(grammarAccess.getCompilationUnitAccess().getIsLibraryAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramElementAccess().getTypeDeclarationParserRuleCall_0()); }
		ruleTypeDeclaration
		{ after(grammarAccess.getProgramElementAccess().getTypeDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramElementAccess().getOperationParserRuleCall_1()); }
		ruleOperation
		{ after(grammarAccess.getProgramElementAccess().getOperationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getBasicTypeParserRuleCall_0()); }
		ruleBasicType
		{ after(grammarAccess.getDataTypeAccess().getBasicTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getDeclaredTypeParserRuleCall_1()); }
		ruleDeclaredType
		{ after(grammarAccess.getDataTypeAccess().getDeclaredTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getReferenceTypeParserRuleCall_2()); }
		ruleReferenceType
		{ after(grammarAccess.getDataTypeAccess().getReferenceTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getListTypeParserRuleCall_3()); }
		ruleListType
		{ after(grammarAccess.getDataTypeAccess().getListTypeParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getOperationTypeParserRuleCall_4()); }
		ruleOperationType
		{ after(grammarAccess.getDataTypeAccess().getOperationTypeParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__TypeNameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameIntegerKeyword_0_0()); }
		'integer'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameIntegerKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameRationalKeyword_0_1()); }
		'rational'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameRationalKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameStringKeyword_0_2()); }
		'string'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameStringKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameBooleanKeyword_0_3()); }
		'boolean'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameBooleanKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VisibilityModifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityModifierAccess().getPrivateKeyword_0()); }
		'private'
		{ after(grammarAccess.getVisibilityModifierAccess().getPrivateKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityModifierAccess().getProtectedKeyword_1()); }
		'protected'
		{ after(grammarAccess.getVisibilityModifierAccess().getProtectedKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclarationAccess().getCompositionParserRuleCall_0()); }
		ruleComposition
		{ after(grammarAccess.getTypeDeclarationAccess().getCompositionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDeclarationAccess().getEnumerationParserRuleCall_1()); }
		ruleEnumeration
		{ after(grammarAccess.getTypeDeclarationAccess().getEnumerationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDeclarationAccess().getTypeParameterParserRuleCall_2()); }
		ruleTypeParameter
		{ after(grammarAccess.getTypeDeclarationAccess().getTypeParameterParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0()); }
		ruleAttribute
		{ after(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getVariableDeclarationParserRuleCall_1()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getFeatureAccess().getVariableDeclarationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getParameterParserRuleCall_2()); }
		ruleParameter
		{ after(grammarAccess.getFeatureAccess().getParameterParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getOperationParserRuleCall_3()); }
		ruleOperation
		{ after(grammarAccess.getFeatureAccess().getOperationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentOrOperationCallParserRuleCall_1()); }
		ruleAssignmentOrOperationCall
		{ after(grammarAccess.getStatementAccess().getAssignmentOrOperationCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_3()); }
		ruleLoopStatement
		{ after(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLetStatementParserRuleCall_4()); }
		ruleLetStatement
		{ after(grammarAccess.getStatementAccess().getLetStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_5()); }
		ruleReturnStatement
		{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_6()); }
		ruleExitStatement
		{ after(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentOrOperationCallAccess().getSymbolReferenceParserRuleCall_0_0()); }
		ruleSymbolReference
		{ after(grammarAccess.getAssignmentOrOperationCallAccess().getSymbolReferenceParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOrOperationCallAccess().getSuperExpressionParserRuleCall_0_1()); }
		ruleSuperExpression
		{ after(grammarAccess.getAssignmentOrOperationCallAccess().getSuperExpressionParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignKeyword_1_1_0_0()); }
		'='
		{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpSolidusEqualsSignKeyword_1_1_0_1()); }
		'/='
		{ after(grammarAccess.getEqualityExpressionAccess().getOpSolidusEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpAmpersandKeyword_1_1_0_2()); }
		'&'
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpAmpersandKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpDivKeyword_1_1_0_2()); }
		'div'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpDivKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpModKeyword_1_1_0_3()); }
		'mod'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpModKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getSymbolReferenceParserRuleCall_0()); }
		ruleSymbolReference
		{ after(grammarAccess.getAtomicExpressionAccess().getSymbolReferenceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getSuperExpressionParserRuleCall_1()); }
		ruleSuperExpression
		{ after(grammarAccess.getAtomicExpressionAccess().getSuperExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
		(rule__AtomicExpression__Group_2__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
		(rule__AtomicExpression__Group_3__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_4()); }
		(rule__AtomicExpression__Group_4__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_5()); }
		(rule__AtomicExpression__Group_5__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_6()); }
		(rule__AtomicExpression__Group_6__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_7()); }
		(rule__AtomicExpression__Group_7__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_8()); }
		(rule__AtomicExpression__Group_8__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_9()); }
		(rule__AtomicExpression__Group_9__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_9()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getListInitParserRuleCall_10()); }
		ruleListInit
		{ after(grammarAccess.getAtomicExpressionAccess().getListInitParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getLambdaExpressionParserRuleCall_11()); }
		ruleLambdaExpression
		{ after(grammarAccess.getAtomicExpressionAccess().getLambdaExpressionParserRuleCall_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAlternatives_5_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_5_1_0_0()); }
		'true'
		{ after(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_5_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueFalseKeyword_5_1_0_1()); }
		'false'
		{ after(grammarAccess.getAtomicExpressionAccess().getValueFalseKeyword_5_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__OpAlternatives_7_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getOpPlusSignKeyword_7_1_0_0()); }
		'+'
		{ after(grammarAccess.getAtomicExpressionAccess().getOpPlusSignKeyword_7_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getOpHyphenMinusKeyword_7_1_0_1()); }
		'-'
		{ after(grammarAccess.getAtomicExpressionAccess().getOpHyphenMinusKeyword_7_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getOpNotKeyword_7_1_0_2()); }
		'not'
		{ after(grammarAccess.getAtomicExpressionAccess().getOpNotKeyword_7_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0()); }
		(rule__SymbolRefAccessModifier__Group_0__0)
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_1()); }
		(rule__SymbolRefAccessModifier__Group_1__0)
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_2()); }
		(rule__SymbolRefAccessModifier__Group_2__0)
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__RightAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitAccess().getRightListInitFunctionParserRuleCall_2_1_0_0()); }
		ruleListInitFunction
		{ after(grammarAccess.getListInitAccess().getRightListInitFunctionParserRuleCall_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getListInitAccess().getRightListInitElementsParserRuleCall_2_1_0_1()); }
		ruleListInitElements
		{ after(grammarAccess.getListInitAccess().getRightListInitElementsParserRuleCall_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__OpAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitFunctionAccess().getOpAsteriskAsteriskKeyword_1_0_0()); }
		'**'
		{ after(grammarAccess.getListInitFunctionAccess().getOpAsteriskAsteriskKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getListInitFunctionAccess().getOpFullStopFullStopKeyword_1_0_1()); }
		'..'
		{ after(grammarAccess.getListInitFunctionAccess().getOpFullStopFullStopKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompilationUnit__Group__0__Impl
	rule__CompilationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompilationUnitAccess().getAlternatives_0()); }
	(rule__CompilationUnit__Alternatives_0)
	{ after(grammarAccess.getCompilationUnitAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompilationUnit__Group__1__Impl
	rule__CompilationUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompilationUnitAccess().getNameAssignment_1()); }
	(rule__CompilationUnit__NameAssignment_1)
	{ after(grammarAccess.getCompilationUnitAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompilationUnit__Group__2__Impl
	rule__CompilationUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompilationUnitAccess().getImportsAssignment_2()); }
	(rule__CompilationUnit__ImportsAssignment_2)*
	{ after(grammarAccess.getCompilationUnitAccess().getImportsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompilationUnit__Group__3__Impl
	rule__CompilationUnit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompilationUnitAccess().getProgramElementsAssignment_3()); }
	(rule__CompilationUnit__ProgramElementsAssignment_3)*
	{ after(grammarAccess.getCompilationUnitAccess().getProgramElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompilationUnit__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompilationUnitAccess().getMainAssignment_4()); }
	(rule__CompilationUnit__MainAssignment_4)?
	{ after(grammarAccess.getCompilationUnitAccess().getMainAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainProcedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainProcedure__Group__0__Impl
	rule__MainProcedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainProcedureAccess().getMainProcedureAction_0()); }
	()
	{ after(grammarAccess.getMainProcedureAccess().getMainProcedureAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainProcedure__Group__1__Impl
	rule__MainProcedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainProcedureAccess().getMainKeyword_1()); }
	'main'
	{ after(grammarAccess.getMainProcedureAccess().getMainKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainProcedure__Group__2__Impl
	rule__MainProcedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainProcedureAccess().getBlockAssignment_2()); }
	(rule__MainProcedure__BlockAssignment_2)
	{ after(grammarAccess.getMainProcedureAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainProcedure__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainProcedureAccess().getEndmainKeyword_3()); }
	'endmain'
	{ after(grammarAccess.getMainProcedureAccess().getEndmainKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group__0__Impl
	rule__DeclaredType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getTypeAssignment_0()); }
	(rule__DeclaredType__TypeAssignment_0)
	{ after(grammarAccess.getDeclaredTypeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getGroup_1()); }
	(rule__DeclaredType__Group_1__0)?
	{ after(grammarAccess.getDeclaredTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1__0__Impl
	rule__DeclaredType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getLessThanSignKeyword_1_0()); }
	'<'
	{ after(grammarAccess.getDeclaredTypeAccess().getLessThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1__1__Impl
	rule__DeclaredType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getTypeParamsAssignment_1_1()); }
	(rule__DeclaredType__TypeParamsAssignment_1_1)
	{ after(grammarAccess.getDeclaredTypeAccess().getTypeParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1__2__Impl
	rule__DeclaredType__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getGroup_1_2()); }
	(rule__DeclaredType__Group_1_2__0)*
	{ after(grammarAccess.getDeclaredTypeAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getGreaterThanSignKeyword_1_3()); }
	'>'
	{ after(grammarAccess.getDeclaredTypeAccess().getGreaterThanSignKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredType__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1_2__0__Impl
	rule__DeclaredType__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getDeclaredTypeAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredType__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredTypeAccess().getTypeParamsAssignment_1_2_1()); }
	(rule__DeclaredType__TypeParamsAssignment_1_2_1)
	{ after(grammarAccess.getDeclaredTypeAccess().getTypeParamsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceType__Group__0__Impl
	rule__ReferenceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceTypeAccess().getReferenceKeyword_0()); }
	'reference'
	{ after(grammarAccess.getReferenceTypeAccess().getReferenceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceType__Group__1__Impl
	rule__ReferenceType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceTypeAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getReferenceTypeAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceType__Group__2__Impl
	rule__ReferenceType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceTypeAccess().getTypeAssignment_2()); }
	(rule__ReferenceType__TypeAssignment_2)
	{ after(grammarAccess.getReferenceTypeAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceTypeAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getReferenceTypeAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListType__Group__0__Impl
	rule__ListType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTypeAccess().getListKeyword_0()); }
	'list'
	{ after(grammarAccess.getListTypeAccess().getListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListType__Group__1__Impl
	rule__ListType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTypeAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getListTypeAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListType__Group__2__Impl
	rule__ListType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTypeAccess().getTypeAssignment_2()); }
	(rule__ListType__TypeAssignment_2)
	{ after(grammarAccess.getListTypeAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__0__Impl
	rule__OperationType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getOperationTypeAction_0()); }
	()
	{ after(grammarAccess.getOperationTypeAccess().getOperationTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__1__Impl
	rule__OperationType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getOperationKeyword_1()); }
	'operation'
	{ after(grammarAccess.getOperationTypeAccess().getOperationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__2__Impl
	rule__OperationType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getOperationTypeAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__3__Impl
	rule__OperationType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getGroup_3()); }
	(rule__OperationType__Group_3__0)?
	{ after(grammarAccess.getOperationTypeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__4__Impl
	rule__OperationType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOperationTypeAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getGroup_5()); }
	(rule__OperationType__Group_5__0)?
	{ after(grammarAccess.getOperationTypeAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_3__0__Impl
	rule__OperationType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getParamTypesAssignment_3_0()); }
	(rule__OperationType__ParamTypesAssignment_3_0)
	{ after(grammarAccess.getOperationTypeAccess().getParamTypesAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getGroup_3_1()); }
	(rule__OperationType__Group_3_1__0)*
	{ after(grammarAccess.getOperationTypeAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationType__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_3_1__0__Impl
	rule__OperationType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getOperationTypeAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getParamTypesAssignment_3_1_1()); }
	(rule__OperationType__ParamTypesAssignment_3_1_1)
	{ after(grammarAccess.getOperationTypeAccess().getParamTypesAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationType__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_5__0__Impl
	rule__OperationType__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getColonKeyword_5_0()); }
	':'
	{ after(grammarAccess.getOperationTypeAccess().getColonKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationType__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationTypeAccess().getTypeAssignment_5_1()); }
	(rule__OperationType__TypeAssignment_5_1)
	{ after(grammarAccess.getOperationTypeAccess().getTypeAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getVisibilityAssignment_0()); }
	(rule__Enumeration__VisibilityAssignment_0)?
	{ after(grammarAccess.getEnumerationAccess().getVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getTypeKeyword_1()); }
	'type'
	{ after(grammarAccess.getEnumerationAccess().getTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
	(rule__Enumeration__NameAssignment_2)
	{ after(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getEnumerationAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__4__Impl
	rule__Enumeration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEnumerationKeyword_4()); }
	'enumeration'
	{ after(grammarAccess.getEnumerationAccess().getEnumerationKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__5__Impl
	rule__Enumeration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValuesAssignment_5()); }
	(rule__Enumeration__ValuesAssignment_5)
	{ after(grammarAccess.getEnumerationAccess().getValuesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__6__Impl
	rule__Enumeration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getGroup_6()); }
	(rule__Enumeration__Group_6__0)*
	{ after(grammarAccess.getEnumerationAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEndtypeKeyword_7()); }
	'endtype'
	{ after(grammarAccess.getEnumerationAccess().getEndtypeKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_6__0__Impl
	rule__Enumeration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getEnumerationAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValuesAssignment_6_1()); }
	(rule__Enumeration__ValuesAssignment_6_1)
	{ after(grammarAccess.getEnumerationAccess().getValuesAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__0__Impl
	rule__Composition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getVisibilityAssignment_0()); }
	(rule__Composition__VisibilityAssignment_0)?
	{ after(grammarAccess.getCompositionAccess().getVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__1__Impl
	rule__Composition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getAbstractAssignment_1()); }
	(rule__Composition__AbstractAssignment_1)?
	{ after(grammarAccess.getCompositionAccess().getAbstractAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__2__Impl
	rule__Composition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getTypeKeyword_2()); }
	'type'
	{ after(grammarAccess.getCompositionAccess().getTypeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__3__Impl
	rule__Composition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getNameAssignment_3()); }
	(rule__Composition__NameAssignment_3)
	{ after(grammarAccess.getCompositionAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__4__Impl
	rule__Composition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_4()); }
	(rule__Composition__Group_4__0)?
	{ after(grammarAccess.getCompositionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__5__Impl
	rule__Composition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getCompositionAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__6__Impl
	rule__Composition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getCompositionKeyword_6()); }
	'composition'
	{ after(grammarAccess.getCompositionAccess().getCompositionKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__7__Impl
	rule__Composition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_7()); }
	(rule__Composition__Group_7__0)?
	{ after(grammarAccess.getCompositionAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__8__Impl
	rule__Composition__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getTypeDeclarationsAssignment_8()); }
	(rule__Composition__TypeDeclarationsAssignment_8)*
	{ after(grammarAccess.getCompositionAccess().getTypeDeclarationsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__9__Impl
	rule__Composition__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getAttributesAssignment_9()); }
	(rule__Composition__AttributesAssignment_9)*
	{ after(grammarAccess.getCompositionAccess().getAttributesAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__10__Impl
	rule__Composition__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getOperationsAssignment_10()); }
	(rule__Composition__OperationsAssignment_10)*
	{ after(grammarAccess.getCompositionAccess().getOperationsAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getEndtypeKeyword_11()); }
	'endtype'
	{ after(grammarAccess.getCompositionAccess().getEndtypeKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4__0__Impl
	rule__Composition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getLessThanSignKeyword_4_0()); }
	'<'
	{ after(grammarAccess.getCompositionAccess().getLessThanSignKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4__1__Impl
	rule__Composition__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getTypeParamsAssignment_4_1()); }
	(rule__Composition__TypeParamsAssignment_4_1)
	{ after(grammarAccess.getCompositionAccess().getTypeParamsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4__2__Impl
	rule__Composition__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_4_2()); }
	(rule__Composition__Group_4_2__0)*
	{ after(grammarAccess.getCompositionAccess().getGroup_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_4_3()); }
	'>'
	{ after(grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4_2__0__Impl
	rule__Composition__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getCommaKeyword_4_2_0()); }
	','
	{ after(grammarAccess.getCompositionAccess().getCommaKeyword_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getTypeParamsAssignment_4_2_1()); }
	(rule__Composition__TypeParamsAssignment_4_2_1)
	{ after(grammarAccess.getCompositionAccess().getTypeParamsAssignment_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7__0__Impl
	rule__Composition__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getExtendsKeyword_7_0()); }
	'extends'
	{ after(grammarAccess.getCompositionAccess().getExtendsKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7__1__Impl
	rule__Composition__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getSuperTypeAssignment_7_1()); }
	(rule__Composition__SuperTypeAssignment_7_1)
	{ after(grammarAccess.getCompositionAccess().getSuperTypeAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_7_2()); }
	(rule__Composition__Group_7_2__0)?
	{ after(grammarAccess.getCompositionAccess().getGroup_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_7_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2__0__Impl
	rule__Composition__Group_7_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getLessThanSignKeyword_7_2_0()); }
	'<'
	{ after(grammarAccess.getCompositionAccess().getLessThanSignKeyword_7_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2__1__Impl
	rule__Composition__Group_7_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getSuperTypeParamsAssignment_7_2_1()); }
	(rule__Composition__SuperTypeParamsAssignment_7_2_1)
	{ after(grammarAccess.getCompositionAccess().getSuperTypeParamsAssignment_7_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2__2__Impl
	rule__Composition__Group_7_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_7_2_2()); }
	(rule__Composition__Group_7_2_2__0)*
	{ after(grammarAccess.getCompositionAccess().getGroup_7_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_7_2_3()); }
	'>'
	{ after(grammarAccess.getCompositionAccess().getGreaterThanSignKeyword_7_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_7_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2_2__0__Impl
	rule__Composition__Group_7_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getCommaKeyword_7_2_2_0()); }
	','
	{ after(grammarAccess.getCompositionAccess().getCommaKeyword_7_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_7_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_7_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getSuperTypeParamsAssignment_7_2_2_1()); }
	(rule__Composition__SuperTypeParamsAssignment_7_2_2_1)
	{ after(grammarAccess.getCompositionAccess().getSuperTypeParamsAssignment_7_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeParameter__Group__0__Impl
	rule__TypeParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeParameterAccess().getNameAssignment_0()); }
	(rule__TypeParameter__NameAssignment_0)
	{ after(grammarAccess.getTypeParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeParameterAccess().getGroup_1()); }
	(rule__TypeParameter__Group_1__0)?
	{ after(grammarAccess.getTypeParameterAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeParameter__Group_1__0__Impl
	rule__TypeParameter__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeParameterAccess().getExtendsKeyword_1_0()); }
	'extends'
	{ after(grammarAccess.getTypeParameterAccess().getExtendsKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeParameter__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeParameterAccess().getSuperTypeAssignment_1_1()); }
	(rule__TypeParameter__SuperTypeAssignment_1_1)
	{ after(grammarAccess.getTypeParameterAccess().getSuperTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getVisibilityAssignment_0()); }
	(rule__Attribute__VisibilityAssignment_0)?
	{ after(grammarAccess.getAttributeAccess().getVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeKeyword_1()); }
	'attribute'
	{ after(grammarAccess.getAttributeAccess().getAttributeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
	(rule__Attribute__NameAssignment_2)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getAttributeAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_4()); }
	(rule__Attribute__TypeAssignment_4)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
	'parameter'
	{ after(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
	(rule__Parameter__NameAssignment_1)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_3()); }
	(rule__Parameter__TypeAssignment_3)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOverrideAssignment_0()); }
	(rule__Operation__OverrideAssignment_0)?
	{ after(grammarAccess.getOperationAccess().getOverrideAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getVisibilityAssignment_1()); }
	(rule__Operation__VisibilityAssignment_1)?
	{ after(grammarAccess.getOperationAccess().getVisibilityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getAbstractAssignment_2()); }
	(rule__Operation__AbstractAssignment_2)?
	{ after(grammarAccess.getOperationAccess().getAbstractAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationKeyword_3()); }
	'operation'
	{ after(grammarAccess.getOperationAccess().getOperationKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__4__Impl
	rule__Operation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getNameAssignment_4()); }
	(rule__Operation__NameAssignment_4)
	{ after(grammarAccess.getOperationAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__5__Impl
	rule__Operation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_5()); }
	'('
	{ after(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__6__Impl
	rule__Operation__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_6()); }
	(rule__Operation__Group_6__0)?
	{ after(grammarAccess.getOperationAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__7__Impl
	rule__Operation__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__8__Impl
	rule__Operation__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_8()); }
	(rule__Operation__Group_8__0)?
	{ after(grammarAccess.getOperationAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_9()); }
	(rule__Operation__Group_9__0)?
	{ after(grammarAccess.getOperationAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_6__0__Impl
	rule__Operation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getParamsAssignment_6_0()); }
	(rule__Operation__ParamsAssignment_6_0)
	{ after(grammarAccess.getOperationAccess().getParamsAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_6_1()); }
	(rule__Operation__Group_6_1__0)*
	{ after(grammarAccess.getOperationAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_6_1__0__Impl
	rule__Operation__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getCommaKeyword_6_1_0()); }
	','
	{ after(grammarAccess.getOperationAccess().getCommaKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getParamsAssignment_6_1_1()); }
	(rule__Operation__ParamsAssignment_6_1_1)
	{ after(grammarAccess.getOperationAccess().getParamsAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_8__0__Impl
	rule__Operation__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getColonKeyword_8_0()); }
	':'
	{ after(grammarAccess.getOperationAccess().getColonKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getTypeAssignment_8_1()); }
	(rule__Operation__TypeAssignment_8_1)
	{ after(grammarAccess.getOperationAccess().getTypeAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_9__0__Impl
	rule__Operation__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getBlockAssignment_9_0()); }
	(rule__Operation__BlockAssignment_9_0)
	{ after(grammarAccess.getOperationAccess().getBlockAssignment_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getEndoperationKeyword_9_1()); }
	'endoperation'
	{ after(grammarAccess.getOperationAccess().getEndoperationKeyword_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	(rule__Block__StatementsAssignment_1)*
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
	()
	{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
	(rule__ReturnStatement__ExpressionAssignment_2)?
	{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExitStatement__Group__0__Impl
	rule__ExitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
	()
	{ after(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExitStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExitStatementAccess().getExitKeyword_1()); }
	'exit'
	{ after(grammarAccess.getExitStatementAccess().getExitKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVariableKeyword_0()); }
	'variable'
	{ after(grammarAccess.getVariableDeclarationAccess().getVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_3()); }
	(rule__VariableDeclaration__TypeAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOrOperationCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentOrOperationCall__Group__0__Impl
	rule__AssignmentOrOperationCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentOrOperationCallAccess().getAlternatives_0()); }
	(rule__AssignmentOrOperationCall__Alternatives_0)
	{ after(grammarAccess.getAssignmentOrOperationCallAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentOrOperationCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentOrOperationCallAccess().getGroup_1()); }
	(rule__AssignmentOrOperationCall__Group_1__0)?
	{ after(grammarAccess.getAssignmentOrOperationCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOrOperationCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentOrOperationCall__Group_1__0__Impl
	rule__AssignmentOrOperationCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentOrOperationCallAccess().getAssignmentOrOperationCallLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAssignmentOrOperationCallAccess().getAssignmentOrOperationCallLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentOrOperationCall__Group_1__1__Impl
	rule__AssignmentOrOperationCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentOrOperationCallAccess().getColonEqualsSignKeyword_1_1()); }
	':='
	{ after(grammarAccess.getAssignmentOrOperationCallAccess().getColonEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentOrOperationCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentOrOperationCallAccess().getRightAssignment_1_2()); }
	(rule__AssignmentOrOperationCall__RightAssignment_1_2)
	{ after(grammarAccess.getAssignmentOrOperationCallAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getLoopStatementAction_0()); }
	()
	{ after(grammarAccess.getLoopStatementAccess().getLoopStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getLoopKeyword_1()); }
	'loop'
	{ after(grammarAccess.getLoopStatementAccess().getLoopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getBlockAssignment_2()); }
	(rule__LoopStatement__BlockAssignment_2)
	{ after(grammarAccess.getLoopStatementAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getEndloopKeyword_3()); }
	'endloop'
	{ after(grammarAccess.getLoopStatementAccess().getEndloopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getExpressionAssignment_1()); }
	(rule__IfStatement__ExpressionAssignment_1)
	{ after(grammarAccess.getIfStatementAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfStatementAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getBlockAssignment_3()); }
	(rule__IfStatement__BlockAssignment_3)
	{ after(grammarAccess.getIfStatementAccess().getBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseIfsAssignment_4()); }
	(rule__IfStatement__ElseIfsAssignment_4)*
	{ after(grammarAccess.getIfStatementAccess().getElseIfsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
	(rule__IfStatement__Group_5__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEndifKeyword_6()); }
	'endif'
	{ after(grammarAccess.getIfStatementAccess().getEndifKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
	('else')
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseBlockAssignment_5_1()); }
	(rule__IfStatement__ElseBlockAssignment_5_1)
	{ after(grammarAccess.getIfStatementAccess().getElseBlockAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIf__Group__0__Impl
	rule__ElseIf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfAccess().getElseifKeyword_0()); }
	'elseif'
	{ after(grammarAccess.getElseIfAccess().getElseifKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIf__Group__1__Impl
	rule__ElseIf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfAccess().getExpressionAssignment_1()); }
	(rule__ElseIf__ExpressionAssignment_1)
	{ after(grammarAccess.getElseIfAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIf__Group__2__Impl
	rule__ElseIf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getElseIfAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIf__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfAccess().getBlockAssignment_3()); }
	(rule__ElseIf__BlockAssignment_3)
	{ after(grammarAccess.getElseIfAccess().getBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LetStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__0__Impl
	rule__LetStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getLetStatementAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__1__Impl
	rule__LetStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getVariableAssignment_1()); }
	(rule__LetStatement__VariableAssignment_1)
	{ after(grammarAccess.getLetStatementAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__2__Impl
	rule__LetStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getBeKeyword_2()); }
	'be'
	{ after(grammarAccess.getLetStatementAccess().getBeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__3__Impl
	rule__LetStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getExpressionAssignment_3()); }
	(rule__LetStatement__ExpressionAssignment_3)
	{ after(grammarAccess.getLetStatementAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__4__Impl
	rule__LetStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getLetStatementAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__5__Impl
	rule__LetStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getBlockAssignment_5()); }
	(rule__LetStatement__BlockAssignment_5)
	{ after(grammarAccess.getLetStatementAccess().getBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__6__Impl
	rule__LetStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getElseLetsAssignment_6()); }
	(rule__LetStatement__ElseLetsAssignment_6)*
	{ after(grammarAccess.getLetStatementAccess().getElseLetsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__7__Impl
	rule__LetStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getGroup_7()); }
	(rule__LetStatement__Group_7__0)?
	{ after(grammarAccess.getLetStatementAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getEndletKeyword_8()); }
	'endlet'
	{ after(grammarAccess.getLetStatementAccess().getEndletKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LetStatement__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group_7__0__Impl
	rule__LetStatement__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getElseKeyword_7_0()); }
	('else')
	{ after(grammarAccess.getLetStatementAccess().getElseKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LetStatement__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetStatementAccess().getElseBlockAssignment_7_1()); }
	(rule__LetStatement__ElseBlockAssignment_7_1)
	{ after(grammarAccess.getLetStatementAccess().getElseBlockAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseLet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__0__Impl
	rule__ElseLet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getElseletKeyword_0()); }
	'elselet'
	{ after(grammarAccess.getElseLetAccess().getElseletKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__1__Impl
	rule__ElseLet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getVariableAssignment_1()); }
	(rule__ElseLet__VariableAssignment_1)
	{ after(grammarAccess.getElseLetAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__2__Impl
	rule__ElseLet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getBeKeyword_2()); }
	'be'
	{ after(grammarAccess.getElseLetAccess().getBeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__3__Impl
	rule__ElseLet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getExpressionAssignment_3()); }
	(rule__ElseLet__ExpressionAssignment_3)
	{ after(grammarAccess.getElseLetAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__4__Impl
	rule__ElseLet__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getElseLetAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseLet__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseLetAccess().getBlockAssignment_5()); }
	(rule__ElseLet__BlockAssignment_5)
	{ after(grammarAccess.getElseLetAccess().getBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
	(rule__OrExpression__OpAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
	{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
	(rule__AndExpression__OpAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
	{ after(grammarAccess.getEqualityExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
	(rule__EqualityExpression__Group_1__0)*
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
	(rule__EqualityExpression__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
	(rule__EqualityExpression__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
	(rule__ComparisonExpression__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
	(rule__AdditiveExpression__OpAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
	(rule__AdditiveExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExponentExpressionParserRuleCall_0()); }
	ruleExponentExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExponentExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
	(rule__MultiplicativeExpression__OpAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
	(rule__MultiplicativeExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentExpression__Group__0__Impl
	rule__ExponentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
	ruleAtomicExpression
	{ after(grammarAccess.getExponentExpressionAccess().getAtomicExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentExpressionAccess().getGroup_1()); }
	(rule__ExponentExpression__Group_1__0)*
	{ after(grammarAccess.getExponentExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExponentExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentExpression__Group_1__0__Impl
	rule__ExponentExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentExpressionAccess().getExponentExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExponentExpressionAccess().getExponentExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentExpression__Group_1__1__Impl
	rule__ExponentExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentExpressionAccess().getOpAssignment_1_1()); }
	(rule__ExponentExpression__OpAssignment_1_1)
	{ after(grammarAccess.getExponentExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExponentExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentExpressionAccess().getRightAssignment_1_2()); }
	(rule__ExponentExpression__RightAssignment_1_2)
	{ after(grammarAccess.getExponentExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getStringConstantAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getStringConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
	(rule__AtomicExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__0__Impl
	rule__AtomicExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getIntegerConstantAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getIntegerConstantAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_3_1()); }
	(rule__AtomicExpression__ValueAssignment_3_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_4__0__Impl
	rule__AtomicExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getRationalConstantAction_4_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getRationalConstantAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_4_1()); }
	(rule__AtomicExpression__ValueAssignment_4_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_5__0__Impl
	rule__AtomicExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getBooleanConstantAction_5_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getBooleanConstantAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_5_1()); }
	(rule__AtomicExpression__ValueAssignment_5_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_6__0__Impl
	rule__AtomicExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getNullAction_6_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getNullAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getNullKeyword_6_1()); }
	'null'
	{ after(grammarAccess.getAtomicExpressionAccess().getNullKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_7__0__Impl
	rule__AtomicExpression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getUnaryAction_7_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getUnaryAction_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_7__1__Impl
	rule__AtomicExpression__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getOpAssignment_7_1()); }
	(rule__AtomicExpression__OpAssignment_7_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getOpAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_7_2()); }
	(rule__AtomicExpression__ExpressionAssignment_7_2)
	{ after(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_8__0__Impl
	rule__AtomicExpression__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getReferenceAction_8_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getReferenceAction_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_8__1__Impl
	rule__AtomicExpression__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getReferenceKeyword_8_1()); }
	'reference'
	{ after(grammarAccess.getAtomicExpressionAccess().getReferenceKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_8__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_8_2()); }
	(rule__AtomicExpression__ExpressionAssignment_8_2)
	{ after(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_9__0__Impl
	rule__AtomicExpression__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getParenthesizedExpressionAction_9_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getParenthesizedExpressionAction_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_9__1__Impl
	rule__AtomicExpression__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_9_1()); }
	'('
	{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_9__2__Impl
	rule__AtomicExpression__Group_9__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_9_2()); }
	(rule__AtomicExpression__ExpressionAssignment_9_2)
	{ after(grammarAccess.getAtomicExpressionAccess().getExpressionAssignment_9_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_9__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_9__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_9_3()); }
	')'
	{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_9_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__0__Impl
	rule__LambdaExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getLambdaExpressionAction_0()); }
	()
	{ after(grammarAccess.getLambdaExpressionAccess().getLambdaExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__1__Impl
	rule__LambdaExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getOperationKeyword_1()); }
	'operation'
	{ after(grammarAccess.getLambdaExpressionAccess().getOperationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__2__Impl
	rule__LambdaExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__3__Impl
	rule__LambdaExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getGroup_3()); }
	(rule__LambdaExpression__Group_3__0)?
	{ after(grammarAccess.getLambdaExpressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__4__Impl
	rule__LambdaExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__5__Impl
	rule__LambdaExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getGroup_5()); }
	(rule__LambdaExpression__Group_5__0)?
	{ after(grammarAccess.getLambdaExpressionAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__6__Impl
	rule__LambdaExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getBlockAssignment_6()); }
	(rule__LambdaExpression__BlockAssignment_6)
	{ after(grammarAccess.getLambdaExpressionAccess().getBlockAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getEndoperationKeyword_7()); }
	'endoperation'
	{ after(grammarAccess.getLambdaExpressionAccess().getEndoperationKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_3__0__Impl
	rule__LambdaExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_3_0()); }
	(rule__LambdaExpression__ParametersAssignment_3_0)
	{ after(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getGroup_3_1()); }
	(rule__LambdaExpression__Group_3_1__0)*
	{ after(grammarAccess.getLambdaExpressionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_3_1__0__Impl
	rule__LambdaExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getLambdaExpressionAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_3_1_1()); }
	(rule__LambdaExpression__ParametersAssignment_3_1_1)
	{ after(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_5__0__Impl
	rule__LambdaExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getColonKeyword_5_0()); }
	':'
	{ after(grammarAccess.getLambdaExpressionAccess().getColonKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LambdaExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaExpressionAccess().getTypeAssignment_5_1()); }
	(rule__LambdaExpression__TypeAssignment_5_1)
	{ after(grammarAccess.getLambdaExpressionAccess().getTypeAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperExpression__Group__0__Impl
	rule__SuperExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperExpressionAccess().getSuperExpressionAction_0()); }
	()
	{ after(grammarAccess.getSuperExpressionAccess().getSuperExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperExpression__Group__1__Impl
	rule__SuperExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperExpressionAccess().getSuperKeyword_1()); }
	'super'
	{ after(grammarAccess.getSuperExpressionAccess().getSuperKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperExpression__Group__2__Impl
	rule__SuperExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperExpressionAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getSuperExpressionAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperExpressionAccess().getMemberCallAssignment_3()); }
	(rule__SuperExpression__MemberCallAssignment_3)
	{ after(grammarAccess.getSuperExpressionAccess().getMemberCallAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group__0__Impl
	rule__SymbolReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getSymbolAssignment_0()); }
	(rule__SymbolReference__SymbolAssignment_0)
	{ after(grammarAccess.getSymbolReferenceAccess().getSymbolAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group__1__Impl
	rule__SymbolReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getCompositionInitAssignment_1()); }
	(rule__SymbolReference__CompositionInitAssignment_1)?
	{ after(grammarAccess.getSymbolReferenceAccess().getCompositionInitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group__2__Impl
	rule__SymbolReference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getAccessModifierAssignment_2()); }
	(rule__SymbolReference__AccessModifierAssignment_2)?
	{ after(grammarAccess.getSymbolReferenceAccess().getAccessModifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getGroup_3()); }
	(rule__SymbolReference__Group_3__0)?
	{ after(grammarAccess.getSymbolReferenceAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolReference__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group_3__0__Impl
	rule__SymbolReference__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getFullStopKeyword_3_0()); }
	'.'
	{ after(grammarAccess.getSymbolReferenceAccess().getFullStopKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolReference__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolReferenceAccess().getMemberCallAssignment_3_1()); }
	(rule__SymbolReference__MemberCallAssignment_3_1)
	{ after(grammarAccess.getSymbolReferenceAccess().getMemberCallAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefAccessModifier__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0__0__Impl
	rule__SymbolRefAccessModifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getOperationInvocationAction_0_0()); }
	()
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getOperationInvocationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0__1__Impl
	rule__SymbolRefAccessModifier__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0__2__Impl
	rule__SymbolRefAccessModifier__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0_2()); }
	(rule__SymbolRefAccessModifier__Group_0_2__0)?
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0__3__Impl
	rule__SymbolRefAccessModifier__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_0_4()); }
	(rule__SymbolRefAccessModifier__AccessModifierAssignment_0_4)?
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefAccessModifier__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0_2__0__Impl
	rule__SymbolRefAccessModifier__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getParamsAssignment_0_2_0()); }
	(rule__SymbolRefAccessModifier__ParamsAssignment_0_2_0)
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getParamsAssignment_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0_2_1()); }
	(rule__SymbolRefAccessModifier__Group_0_2_1__0)*
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getGroup_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefAccessModifier__Group_0_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0_2_1__0__Impl
	rule__SymbolRefAccessModifier__Group_0_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getCommaKeyword_0_2_1_0()); }
	','
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getCommaKeyword_0_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_0_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_0_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getParamsAssignment_0_2_1_1()); }
	(rule__SymbolRefAccessModifier__ParamsAssignment_0_2_1_1)
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getParamsAssignment_0_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefAccessModifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_1__0__Impl
	rule__SymbolRefAccessModifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getListAccessAction_1_0()); }
	()
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getListAccessAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_1__1__Impl
	rule__SymbolRefAccessModifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_1__2__Impl
	rule__SymbolRefAccessModifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getIndexAssignment_1_2()); }
	(rule__SymbolRefAccessModifier__IndexAssignment_1_2)
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getIndexAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_1__3__Impl
	rule__SymbolRefAccessModifier__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getRightSquareBracketKeyword_1_3()); }
	']'
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_1_4()); }
	(rule__SymbolRefAccessModifier__AccessModifierAssignment_1_4)?
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefAccessModifier__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_2__0__Impl
	rule__SymbolRefAccessModifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getDereferenceAction_2_0()); }
	()
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getDereferenceAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_2__1__Impl
	rule__SymbolRefAccessModifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getCommercialAtKeyword_2_1()); }
	'@'
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getCommercialAtKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefAccessModifier__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_2_2()); }
	(rule__SymbolRefAccessModifier__AccessModifierAssignment_2_2)?
	{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefCompositionInit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group__0__Impl
	rule__SymbolRefCompositionInit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getSymbolRefCompositionInitAction_0()); }
	()
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getSymbolRefCompositionInitAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group__1__Impl
	rule__SymbolRefCompositionInit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group__2__Impl
	rule__SymbolRefCompositionInit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getGroup_2()); }
	(rule__SymbolRefCompositionInit__Group_2__0)?
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefCompositionInit__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group_2__0__Impl
	rule__SymbolRefCompositionInit__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesAssignment_2_0()); }
	(rule__SymbolRefCompositionInit__AttributesAssignment_2_0)
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getGroup_2_1()); }
	(rule__SymbolRefCompositionInit__Group_2_1__0)*
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefCompositionInit__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group_2_1__0__Impl
	rule__SymbolRefCompositionInit__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionInit__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesAssignment_2_1_1()); }
	(rule__SymbolRefCompositionInit__AttributesAssignment_2_1_1)
	{ after(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolRefCompositionAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionAttribute__Group__0__Impl
	rule__SymbolRefCompositionAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAssignment_0()); }
	(rule__SymbolRefCompositionAttribute__AttributeAssignment_0)
	{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionAttribute__Group__1__Impl
	rule__SymbolRefCompositionAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymbolRefCompositionAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getExpressionAssignment_2()); }
	(rule__SymbolRefCompositionAttribute__ExpressionAssignment_2)
	{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListInit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group__0__Impl
	rule__ListInit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getListInitAction_0()); }
	()
	{ after(grammarAccess.getListInitAccess().getListInitAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group__1__Impl
	rule__ListInit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getListInitAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group__2__Impl
	rule__ListInit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getGroup_2()); }
	(rule__ListInit__Group_2__0)?
	{ after(grammarAccess.getListInitAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getListInitAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListInit__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group_2__0__Impl
	rule__ListInit__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getLeftAssignment_2_0()); }
	(rule__ListInit__LeftAssignment_2_0)
	{ after(grammarAccess.getListInitAccess().getLeftAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInit__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitAccess().getRightAssignment_2_1()); }
	(rule__ListInit__RightAssignment_2_1)
	{ after(grammarAccess.getListInitAccess().getRightAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListInitFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitFunction__Group__0__Impl
	rule__ListInitFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitFunctionAccess().getListInitFunctionAction_0()); }
	()
	{ after(grammarAccess.getListInitFunctionAccess().getListInitFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitFunction__Group__1__Impl
	rule__ListInitFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitFunctionAccess().getOpAssignment_1()); }
	(rule__ListInitFunction__OpAssignment_1)
	{ after(grammarAccess.getListInitFunctionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitFunction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitFunctionAccess().getExpressionAssignment_2()); }
	(rule__ListInitFunction__ExpressionAssignment_2)
	{ after(grammarAccess.getListInitFunctionAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListInitElements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitElements__Group__0__Impl
	rule__ListInitElements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitElementsAccess().getListInitElementsAction_0()); }
	()
	{ after(grammarAccess.getListInitElementsAccess().getListInitElementsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitElements__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitElementsAccess().getGroup_1()); }
	(rule__ListInitElements__Group_1__0)*
	{ after(grammarAccess.getListInitElementsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListInitElements__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitElements__Group_1__0__Impl
	rule__ListInitElements__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitElementsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getListInitElementsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListInitElements__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListInitElementsAccess().getElementsAssignment_1_1()); }
	(rule__ListInitElements__ElementsAssignment_1_1)
	{ after(grammarAccess.getListInitElementsAccess().getElementsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompilationUnit__IsProgramAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getIsProgramProgramKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getCompilationUnitAccess().getIsProgramProgramKeyword_0_0_0()); }
			'program'
			{ after(grammarAccess.getCompilationUnitAccess().getIsProgramProgramKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getCompilationUnitAccess().getIsProgramProgramKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__IsLibraryAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getIsLibraryLibraryKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getCompilationUnitAccess().getIsLibraryLibraryKeyword_0_1_0()); }
			'library'
			{ after(grammarAccess.getCompilationUnitAccess().getIsLibraryLibraryKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getCompilationUnitAccess().getIsLibraryLibraryKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCompilationUnitAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__ImportsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getImportsImportParserRuleCall_2_0()); }
		ruleImport
		{ after(grammarAccess.getCompilationUnitAccess().getImportsImportParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__ProgramElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getProgramElementsProgramElementParserRuleCall_3_0()); }
		ruleProgramElement
		{ after(grammarAccess.getCompilationUnitAccess().getProgramElementsProgramElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompilationUnit__MainAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompilationUnitAccess().getMainMainProcedureParserRuleCall_4_0()); }
		ruleMainProcedure
		{ after(grammarAccess.getCompilationUnitAccess().getMainMainProcedureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceCompilationUnitCrossReference_1_0()); }
		(
			{ before(grammarAccess.getImportAccess().getImportedNamespaceCompilationUnitIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getImportAccess().getImportedNamespaceCompilationUnitIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getImportAccess().getImportedNamespaceCompilationUnitCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcedure__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainProcedureAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getMainProcedureAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getTypeTypeDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getDeclaredTypeAccess().getTypeTypeDeclarationQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getDeclaredTypeAccess().getTypeTypeDeclarationQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getDeclaredTypeAccess().getTypeTypeDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__TypeParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_1_0()); }
		ruleDataType
		{ after(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__TypeParamsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_2_1_0()); }
		ruleDataType
		{ after(grammarAccess.getDeclaredTypeAccess().getTypeParamsDataTypeParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__TypeNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0()); }
		(rule__BasicType__TypeNameAlternatives_0)
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceTypeAccess().getTypeDataTypeParserRuleCall_2_0()); }
		ruleDataType
		{ after(grammarAccess.getReferenceTypeAccess().getTypeDataTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListTypeAccess().getTypeDataTypeParserRuleCall_2_0()); }
		ruleDataType
		{ after(grammarAccess.getListTypeAccess().getTypeDataTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__ParamTypesAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_0_0()); }
		ruleDataType
		{ after(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__ParamTypesAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_1_1_0()); }
		ruleDataType
		{ after(grammarAccess.getOperationTypeAccess().getParamTypesDataTypeParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__TypeAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationTypeAccess().getTypeDataTypeParserRuleCall_5_1_0()); }
		ruleDataType
		{ after(grammarAccess.getOperationTypeAccess().getTypeDataTypeParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__VisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
		ruleVisibilityModifier
		{ after(grammarAccess.getEnumerationAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValuesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_5_0()); }
		ruleEnumerationValue
		{ after(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValuesAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_6_1_0()); }
		ruleEnumerationValue
		{ after(grammarAccess.getEnumerationAccess().getValuesEnumerationValueParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationValue__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationValueAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumerationValueAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__VisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
		ruleVisibilityModifier
		{ after(grammarAccess.getCompositionAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__AbstractAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getAbstractAbstractKeyword_1_0()); }
		(
			{ before(grammarAccess.getCompositionAccess().getAbstractAbstractKeyword_1_0()); }
			'abstract'
			{ after(grammarAccess.getCompositionAccess().getAbstractAbstractKeyword_1_0()); }
		)
		{ after(grammarAccess.getCompositionAccess().getAbstractAbstractKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__TypeParamsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_1_0()); }
		ruleTypeParameter
		{ after(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__TypeParamsAssignment_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_2_1_0()); }
		ruleTypeParameter
		{ after(grammarAccess.getCompositionAccess().getTypeParamsTypeParameterParserRuleCall_4_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__SuperTypeAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getSuperTypeCompositionCrossReference_7_1_0()); }
		(
			{ before(grammarAccess.getCompositionAccess().getSuperTypeCompositionQualifiedNameParserRuleCall_7_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getCompositionAccess().getSuperTypeCompositionQualifiedNameParserRuleCall_7_1_0_1()); }
		)
		{ after(grammarAccess.getCompositionAccess().getSuperTypeCompositionCrossReference_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__SuperTypeParamsAssignment_7_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0()); }
		ruleTypeParameter
		{ after(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__SuperTypeParamsAssignment_7_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0()); }
		ruleTypeParameter
		{ after(grammarAccess.getCompositionAccess().getSuperTypeParamsTypeParameterParserRuleCall_7_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__TypeDeclarationsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_8_0()); }
		ruleTypeDeclaration
		{ after(grammarAccess.getCompositionAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__AttributesAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getAttributesAttributeParserRuleCall_9_0()); }
		ruleAttribute
		{ after(grammarAccess.getCompositionAccess().getAttributesAttributeParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__OperationsAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getOperationsOperationParserRuleCall_10_0()); }
		ruleOperation
		{ after(grammarAccess.getCompositionAccess().getOperationsOperationParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__SuperTypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeParameterAccess().getSuperTypeCompositionCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getTypeParameterAccess().getSuperTypeCompositionQualifiedNameParserRuleCall_1_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getTypeParameterAccess().getSuperTypeCompositionQualifiedNameParserRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getTypeParameterAccess().getSuperTypeCompositionCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__VisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
		ruleVisibilityModifier
		{ after(grammarAccess.getAttributeAccess().getVisibilityVisibilityModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeDataTypeParserRuleCall_4_0()); }
		ruleDataType
		{ after(grammarAccess.getAttributeAccess().getTypeDataTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeDataTypeParserRuleCall_3_0()); }
		ruleDataType
		{ after(grammarAccess.getParameterAccess().getTypeDataTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OverrideAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOverrideOverrideKeyword_0_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getOverrideOverrideKeyword_0_0()); }
			'override'
			{ after(grammarAccess.getOperationAccess().getOverrideOverrideKeyword_0_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getOverrideOverrideKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__VisibilityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getVisibilityVisibilityModifierParserRuleCall_1_0()); }
		ruleVisibilityModifier
		{ after(grammarAccess.getOperationAccess().getVisibilityVisibilityModifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__AbstractAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getAbstractAbstractKeyword_2_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getAbstractAbstractKeyword_2_0()); }
			'abstract'
			{ after(grammarAccess.getOperationAccess().getAbstractAbstractKeyword_2_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getAbstractAbstractKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamsAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_0_0()); }
		ruleParameter
		{ after(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamsAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getOperationAccess().getParamsParameterParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__TypeAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getTypeDataTypeParserRuleCall_8_1_0()); }
		ruleDataType
		{ after(grammarAccess.getOperationAccess().getTypeDataTypeParserRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__BlockAssignment_9_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getBlockBlockParserRuleCall_9_0_0()); }
		ruleBlock
		{ after(grammarAccess.getOperationAccess().getBlockBlockParserRuleCall_9_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getTypeDataTypeParserRuleCall_3_0()); }
		ruleDataType
		{ after(grammarAccess.getVariableDeclarationAccess().getTypeDataTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOrOperationCall__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentOrOperationCallAccess().getRightExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentOrOperationCallAccess().getRightExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getLoopStatementAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__BlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getBlockBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStatementAccess().getBlockBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseIfsElseIfParserRuleCall_4_0()); }
		ruleElseIf
		{ after(grammarAccess.getIfStatementAccess().getElseIfsElseIfParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBlockAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_5_1_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseIfAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getElseIfAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIf__BlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseIfAccess().getBlockBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getElseIfAccess().getBlockBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getLetStatementAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLetStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__BlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getBlockBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getLetStatementAccess().getBlockBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__ElseLetsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getElseLetsElseLetParserRuleCall_6_0()); }
		ruleElseLet
		{ after(grammarAccess.getLetStatementAccess().getElseLetsElseLetParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LetStatement__ElseBlockAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetStatementAccess().getElseBlockBlockParserRuleCall_7_1_0()); }
		ruleBlock
		{ after(grammarAccess.getLetStatementAccess().getElseBlockBlockParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getElseLetAccess().getVariableVariableDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getElseLetAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseLet__BlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseLetAccess().getBlockBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getElseLetAccess().getBlockBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
			'or'
			{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
			'and'
			{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
		ruleEqualityExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__EqualityExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getEqualityExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__AdditiveExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__MultiplicativeExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightExponentExpressionParserRuleCall_1_2_0()); }
		ruleExponentExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightExponentExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentExpressionAccess().getOpExpKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getExponentExpressionAccess().getOpExpKeyword_1_1_0()); }
			'exp'
			{ after(grammarAccess.getExponentExpressionAccess().getOpExpKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getExponentExpressionAccess().getOpExpKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExponentExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentExpressionAccess().getRightAtomicExpressionParserRuleCall_1_2_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getExponentExpressionAccess().getRightAtomicExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueINTEGERTerminalRuleCall_3_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getAtomicExpressionAccess().getValueINTEGERTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueRATIONALTerminalRuleCall_4_1_0()); }
		RULE_RATIONAL
		{ after(grammarAccess.getAtomicExpressionAccess().getValueRATIONALTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueAlternatives_5_1_0()); }
		(rule__AtomicExpression__ValueAlternatives_5_1_0)
		{ after(grammarAccess.getAtomicExpressionAccess().getValueAlternatives_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__OpAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getOpAlternatives_7_1_0()); }
		(rule__AtomicExpression__OpAlternatives_7_1_0)
		{ after(grammarAccess.getAtomicExpressionAccess().getOpAlternatives_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ExpressionAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_7_2_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ExpressionAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_8_2_0()); }
		ruleAtomicExpression
		{ after(grammarAccess.getAtomicExpressionAccess().getExpressionAtomicExpressionParserRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ExpressionAssignment_9_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getExpressionExpressionParserRuleCall_9_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAtomicExpressionAccess().getExpressionExpressionParserRuleCall_9_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ParametersAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ParametersAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getLambdaExpressionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__TypeAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getTypeDataTypeParserRuleCall_5_1_0()); }
		ruleDataType
		{ after(grammarAccess.getLambdaExpressionAccess().getTypeDataTypeParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__BlockAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getBlockBlockParserRuleCall_6_0()); }
		ruleBlock
		{ after(grammarAccess.getLambdaExpressionAccess().getBlockBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExpression__MemberCallAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperExpressionAccess().getMemberCallSymbolReferenceParserRuleCall_3_0()); }
		ruleSymbolReference
		{ after(grammarAccess.getSuperExpressionAccess().getMemberCallSymbolReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__SymbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolReferenceAccess().getSymbolNamedElementCrossReference_0_0()); }
		(
			{ before(grammarAccess.getSymbolReferenceAccess().getSymbolNamedElementIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSymbolReferenceAccess().getSymbolNamedElementIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getSymbolReferenceAccess().getSymbolNamedElementCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__CompositionInitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolReferenceAccess().getCompositionInitSymbolRefCompositionInitParserRuleCall_1_0()); }
		ruleSymbolRefCompositionInit
		{ after(grammarAccess.getSymbolReferenceAccess().getCompositionInitSymbolRefCompositionInitParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__AccessModifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolReferenceAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_0()); }
		ruleSymbolRefAccessModifier
		{ after(grammarAccess.getSymbolReferenceAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__MemberCallAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolReferenceAccess().getMemberCallSymbolReferenceParserRuleCall_3_1_0()); }
		ruleSymbolReference
		{ after(grammarAccess.getSymbolReferenceAccess().getMemberCallSymbolReferenceParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__ParamsAssignment_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__ParamsAssignment_0_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getParamsExpressionParserRuleCall_0_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__AccessModifierAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0()); }
		ruleSymbolRefAccessModifier
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__IndexAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getIndexExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getIndexExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__AccessModifierAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0()); }
		ruleSymbolRefAccessModifier
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefAccessModifier__AccessModifierAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0()); }
		ruleSymbolRefAccessModifier
		{ after(grammarAccess.getSymbolRefAccessModifierAccess().getAccessModifierSymbolRefAccessModifierParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__AttributesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0()); }
		ruleSymbolRefCompositionAttribute
		{ after(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionInit__AttributesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0()); }
		ruleSymbolRefCompositionAttribute
		{ after(grammarAccess.getSymbolRefCompositionInitAccess().getAttributesSymbolRefCompositionAttributeParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__AttributeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAttributeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAttributeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAttributeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getAttributeAttributeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolRefCompositionAttribute__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymbolRefCompositionAttributeAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSymbolRefCompositionAttributeAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__LeftAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitAccess().getLeftExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getListInitAccess().getLeftExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInit__RightAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitAccess().getRightAlternatives_2_1_0()); }
		(rule__ListInit__RightAlternatives_2_1_0)
		{ after(grammarAccess.getListInitAccess().getRightAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitFunctionAccess().getOpAlternatives_1_0()); }
		(rule__ListInitFunction__OpAlternatives_1_0)
		{ after(grammarAccess.getListInitFunctionAccess().getOpAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitFunction__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitFunctionAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getListInitFunctionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListInitElements__ElementsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListInitElementsAccess().getElementsExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getListInitElementsAccess().getElementsExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_INTEGER : RULE_INT;

RULE_RATIONAL : RULE_INT '.' RULE_INT ('E' ('+'|'-')? RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
